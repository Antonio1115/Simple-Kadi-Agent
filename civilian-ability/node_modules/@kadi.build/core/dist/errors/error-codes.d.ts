/**
 * KADI Core Error Codes
 *
 * Inspired by the broker error system to ensure consistency
 *
 * Format: DOMAIN_SPECIFIC_ERROR
 * Ranges:
 *   1000-1999: Connection errors
 *   2000-2999: Authentication errors
 *   3000-3999: Ability/Loading errors
 *   4000-4999: Tool execution errors
 *   5000-5999: Protocol errors
 *   6000-6999: Configuration errors
 *   7000-7999: System/Internal errors
 */
export declare const CoreErrorCodes: {
    readonly CORE_CONNECTION_FAILED: {
        readonly code: "CORE_CONNECTION_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to establish connection";
    };
    readonly CORE_CONNECTION_TIMEOUT: {
        readonly code: "CORE_CONNECTION_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Connection attempt timed out";
    };
    readonly CORE_CONNECTION_REFUSED: {
        readonly code: "CORE_CONNECTION_REFUSED";
        readonly httpStatus: 503;
        readonly message: "Connection refused by remote server";
    };
    readonly CORE_BROKER_UNAVAILABLE: {
        readonly code: "CORE_BROKER_UNAVAILABLE";
        readonly httpStatus: 503;
        readonly message: "Broker service is unavailable";
    };
    readonly CORE_BROKER_CONNECTION_LOST: {
        readonly code: "CORE_BROKER_CONNECTION_LOST";
        readonly httpStatus: 503;
        readonly message: "Connection to broker was lost";
    };
    readonly CORE_AUTH_FAILED: {
        readonly code: "CORE_AUTH_FAILED";
        readonly httpStatus: 401;
        readonly message: "Authentication failed";
    };
    readonly CORE_AUTH_HANDSHAKE_FAILED: {
        readonly code: "CORE_AUTH_HANDSHAKE_FAILED";
        readonly httpStatus: 400;
        readonly message: "Authentication handshake failed";
    };
    readonly CORE_AUTH_TOKEN_INVALID: {
        readonly code: "CORE_AUTH_TOKEN_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid authentication token";
    };
    readonly CORE_ABILITY_NOT_FOUND: {
        readonly code: "CORE_ABILITY_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested ability does not exist";
    };
    readonly CORE_ABILITY_LOAD_FAILED: {
        readonly code: "CORE_ABILITY_LOAD_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to load ability";
    };
    readonly CORE_ABILITY_NOT_ACCESSIBLE: {
        readonly code: "CORE_ABILITY_NOT_ACCESSIBLE";
        readonly httpStatus: 403;
        readonly message: "Ability not accessible in current context";
    };
    readonly CORE_ABILITY_START_FAILED: {
        readonly code: "CORE_ABILITY_START_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to start ability process";
    };
    readonly CORE_ABILITY_TIMEOUT: {
        readonly code: "CORE_ABILITY_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Ability operation timed out";
    };
    readonly CORE_ABILITY_PATH_INVALID: {
        readonly code: "CORE_ABILITY_PATH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid ability path or name format";
    };
    readonly CORE_ABILITY_MANIFEST_INVALID: {
        readonly code: "CORE_ABILITY_MANIFEST_INVALID";
        readonly httpStatus: 400;
        readonly message: "Ability manifest file is invalid or missing";
    };
    readonly CORE_TOOL_NOT_FOUND: {
        readonly code: "CORE_TOOL_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested tool does not exist";
    };
    readonly CORE_TOOL_INVOCATION_FAILED: {
        readonly code: "CORE_TOOL_INVOCATION_FAILED";
        readonly httpStatus: 500;
        readonly message: "Tool invocation failed";
    };
    readonly CORE_TOOL_TIMEOUT: {
        readonly code: "CORE_TOOL_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Tool execution timed out";
    };
    readonly CORE_TOOL_INPUT_INVALID: {
        readonly code: "CORE_TOOL_INPUT_INVALID";
        readonly httpStatus: 400;
        readonly message: "Tool input validation failed";
    };
    readonly CORE_PROTOCOL_UNSUPPORTED: {
        readonly code: "CORE_PROTOCOL_UNSUPPORTED";
        readonly httpStatus: 400;
        readonly message: "Protocol not supported";
    };
    readonly CORE_PROTOCOL_VERSION_MISMATCH: {
        readonly code: "CORE_PROTOCOL_VERSION_MISMATCH";
        readonly httpStatus: 400;
        readonly message: "Protocol version mismatch";
    };
    readonly CORE_MESSAGE_INVALID: {
        readonly code: "CORE_MESSAGE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid message format";
    };
    readonly CORE_RPC_REQUEST_FAILED: {
        readonly code: "CORE_RPC_REQUEST_FAILED";
        readonly httpStatus: 500;
        readonly message: "RPC request failed";
    };
    readonly CORE_CONFIG_INVALID: {
        readonly code: "CORE_CONFIG_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid configuration";
    };
    readonly CORE_CONFIG_MISSING: {
        readonly code: "CORE_CONFIG_MISSING";
        readonly httpStatus: 400;
        readonly message: "Required configuration missing";
    };
    readonly CORE_CONFIG_PATH_INVALID: {
        readonly code: "CORE_CONFIG_PATH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid configuration file path";
    };
    readonly CORE_INTERNAL_ERROR: {
        readonly code: "CORE_INTERNAL_ERROR";
        readonly httpStatus: 500;
        readonly message: "An internal error occurred";
    };
    readonly CORE_NOT_IMPLEMENTED: {
        readonly code: "CORE_NOT_IMPLEMENTED";
        readonly httpStatus: 501;
        readonly message: "Feature not yet implemented";
    };
    readonly CORE_SYSTEM_OVERLOADED: {
        readonly code: "CORE_SYSTEM_OVERLOADED";
        readonly httpStatus: 503;
        readonly message: "System is currently overloaded";
    };
};
export declare const BrokerErrorCodes: {
    readonly BROKER_TOOL_NOT_FOUND: {
        readonly code: "BROKER_TOOL_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested tool does not exist";
    };
    readonly BROKER_TOOL_NOT_ACCESSIBLE: {
        readonly code: "BROKER_TOOL_NOT_ACCESSIBLE";
        readonly httpStatus: 403;
        readonly message: "Tool not accessible within caller networks";
    };
    readonly BROKER_TOOL_INPUT_SCHEMA_VIOLATION: {
        readonly code: "BROKER_TOOL_INPUT_SCHEMA_VIOLATION";
        readonly httpStatus: 400;
        readonly message: "Tool input does not match schema";
    };
    readonly BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION: {
        readonly code: "BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION";
        readonly httpStatus: 500;
        readonly message: "Tool output does not match schema";
    };
    readonly BROKER_SESSION_NOT_INITIALIZED: {
        readonly code: "BROKER_SESSION_NOT_INITIALIZED";
        readonly httpStatus: 400;
        readonly message: "Session not initialized";
    };
    readonly BROKER_SESSION_ALREADY_INITIALIZED: {
        readonly code: "BROKER_SESSION_ALREADY_INITIALIZED";
        readonly httpStatus: 409;
        readonly message: "Session already initialized";
    };
    readonly BROKER_SESSION_INVALID_STATE: {
        readonly code: "BROKER_SESSION_INVALID_STATE";
        readonly httpStatus: 400;
        readonly message: "Invalid session state";
    };
    readonly BROKER_SESSION_HANDSHAKE_FAILED: {
        readonly code: "BROKER_SESSION_HANDSHAKE_FAILED";
        readonly httpStatus: 400;
        readonly message: "Handshake failed";
    };
    readonly BROKER_SESSION_NOT_FOUND: {
        readonly code: "BROKER_SESSION_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Session not found";
    };
    readonly BROKER_SESSION_TIMEOUT: {
        readonly code: "BROKER_SESSION_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Session timeout";
    };
    readonly BROKER_SESSION_ROLE_INVALID: {
        readonly code: "BROKER_SESSION_ROLE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid session role";
    };
    readonly BROKER_SESSION_KADI_HANDLER_FAILED: {
        readonly code: "BROKER_SESSION_KADI_HANDLER_FAILED";
        readonly httpStatus: 500;
        readonly message: "KADI handler failed";
    };
    readonly BROKER_SESSION_RATE_LIMITED: {
        readonly code: "BROKER_SESSION_RATE_LIMITED";
        readonly httpStatus: 429;
        readonly message: "Session rate limited";
    };
    readonly BROKER_SESSION_NOT_READY: {
        readonly code: "BROKER_SESSION_NOT_READY";
        readonly httpStatus: 400;
        readonly message: "Session not ready";
    };
    readonly BROKER_AUTH_MISSING_CREDENTIALS: {
        readonly code: "BROKER_AUTH_MISSING_CREDENTIALS";
        readonly httpStatus: 401;
        readonly message: "Missing credentials";
    };
    readonly BROKER_AUTH_SIGNATURE_INVALID: {
        readonly code: "BROKER_AUTH_SIGNATURE_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid signature";
    };
    readonly BROKER_AUTH_PUBLIC_KEY_INVALID: {
        readonly code: "BROKER_AUTH_PUBLIC_KEY_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid public key";
    };
    readonly BROKER_AUTH_NONCE_MISMATCH: {
        readonly code: "BROKER_AUTH_NONCE_MISMATCH";
        readonly httpStatus: 401;
        readonly message: "Nonce mismatch";
    };
    readonly BROKER_AUTH_AGENT_UNKNOWN: {
        readonly code: "BROKER_AUTH_AGENT_UNKNOWN";
        readonly httpStatus: 404;
        readonly message: "Unknown agent";
    };
    readonly BROKER_AUTH_SEQUENCE_ERROR: {
        readonly code: "BROKER_AUTH_SEQUENCE_ERROR";
        readonly httpStatus: 400;
        readonly message: "Auth sequence error";
    };
    readonly BROKER_AGENT_NOT_AUTHENTICATED: {
        readonly code: "BROKER_AGENT_NOT_AUTHENTICATED";
        readonly httpStatus: 401;
        readonly message: "Agent not authenticated";
    };
    readonly BROKER_AGENT_NETWORKS_MISSING: {
        readonly code: "BROKER_AGENT_NETWORKS_MISSING";
        readonly httpStatus: 400;
        readonly message: "Networks required";
    };
    readonly BROKER_AGENT_NETWORKS_EMPTY: {
        readonly code: "BROKER_AGENT_NETWORKS_EMPTY";
        readonly httpStatus: 400;
        readonly message: "No networks specified";
    };
    readonly BROKER_AGENT_ALREADY_REGISTERED: {
        readonly code: "BROKER_AGENT_ALREADY_REGISTERED";
        readonly httpStatus: 409;
        readonly message: "Agent already registered";
    };
    readonly BROKER_AGENT_NOT_FOUND: {
        readonly code: "BROKER_AGENT_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Agent not found";
    };
    readonly BROKER_AGENT_ID_NOT_SET: {
        readonly code: "BROKER_AGENT_ID_NOT_SET";
        readonly httpStatus: 400;
        readonly message: "Agent ID required";
    };
    readonly BROKER_AGENT_METADATA_NOT_FOUND: {
        readonly code: "BROKER_AGENT_METADATA_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Agent metadata not found";
    };
    readonly BROKER_NETWORK_NOT_FOUND: {
        readonly code: "BROKER_NETWORK_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Network not found";
    };
    readonly BROKER_NETWORK_ACCESS_DENIED: {
        readonly code: "BROKER_NETWORK_ACCESS_DENIED";
        readonly httpStatus: 403;
        readonly message: "Network access denied";
    };
    readonly BROKER_NETWORK_PUBLISH_DENIED: {
        readonly code: "BROKER_NETWORK_PUBLISH_DENIED";
        readonly httpStatus: 403;
        readonly message: "Publish denied for network";
    };
    readonly BROKER_QUEUE_CONNECTION_FAILED: {
        readonly code: "BROKER_QUEUE_CONNECTION_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to connect to message queue";
    };
    readonly BROKER_QUEUE_PUBLISH_FAILED: {
        readonly code: "BROKER_QUEUE_PUBLISH_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to publish message to queue";
    };
    readonly BROKER_QUEUE_SUBSCRIBE_FAILED: {
        readonly code: "BROKER_QUEUE_SUBSCRIBE_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to subscribe to queue";
    };
    readonly BROKER_QUEUE_NOT_FOUND: {
        readonly code: "BROKER_QUEUE_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Message queue does not exist";
    };
    readonly BROKER_SCHEMA_COMPILATION_ERROR: {
        readonly code: "BROKER_SCHEMA_COMPILATION_ERROR";
        readonly httpStatus: 400;
        readonly message: "Failed to compile JSON Schema";
    };
    readonly BROKER_PROTOCOL_VERSION_UNSUPPORTED: {
        readonly code: "BROKER_PROTOCOL_VERSION_UNSUPPORTED";
        readonly httpStatus: 400;
        readonly message: "Protocol version not supported";
    };
    readonly BROKER_PROTOCOL_METHOD_UNKNOWN: {
        readonly code: "BROKER_PROTOCOL_METHOD_UNKNOWN";
        readonly httpStatus: 400;
        readonly message: "Unknown protocol method";
    };
    readonly BROKER_PROTOCOL_INVALID_MESSAGE: {
        readonly code: "BROKER_PROTOCOL_INVALID_MESSAGE";
        readonly httpStatus: 400;
        readonly message: "Invalid message format";
    };
    readonly BROKER_PROTOCOL_MISSING_PARAMS: {
        readonly code: "BROKER_PROTOCOL_MISSING_PARAMS";
        readonly httpStatus: 400;
        readonly message: "Required parameters missing";
    };
    readonly BROKER_MCP_ALREADY_INITIALIZED: {
        readonly code: "BROKER_MCP_ALREADY_INITIALIZED";
        readonly httpStatus: 409;
        readonly message: "MCP bridge is already initialized";
    };
    readonly BROKER_MCP_NOT_INITIALIZED: {
        readonly code: "BROKER_MCP_NOT_INITIALIZED";
        readonly httpStatus: 400;
        readonly message: "MCP bridge must be initialized first";
    };
    readonly BROKER_MCP_METHOD_UNKNOWN: {
        readonly code: "BROKER_MCP_METHOD_UNKNOWN";
        readonly httpStatus: 400;
        readonly message: "Unknown MCP method";
    };
    readonly BROKER_MCP_CLIENT_NOT_READY: {
        readonly code: "BROKER_MCP_CLIENT_NOT_READY";
        readonly httpStatus: 400;
        readonly message: "MCP client not ready - must initialize first";
    };
    readonly BROKER_MCP_HANDLER_FAILED: {
        readonly code: "BROKER_MCP_HANDLER_FAILED";
        readonly httpStatus: 500;
        readonly message: "MCP message handler failed";
    };
    readonly BROKER_NAMESPACE_INVALID_FORMAT: {
        readonly code: "BROKER_NAMESPACE_INVALID_FORMAT";
        readonly httpStatus: 400;
        readonly message: "Invalid namespace format";
    };
    readonly BROKER_NAMESPACE_RESERVED: {
        readonly code: "BROKER_NAMESPACE_RESERVED";
        readonly httpStatus: 400;
        readonly message: "Namespace is reserved and cannot be used";
    };
    readonly BROKER_NAMESPACE_VERSION_INVALID: {
        readonly code: "BROKER_NAMESPACE_VERSION_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid namespace version format";
    };
    readonly BROKER_TOOL_KEY_INVALID: {
        readonly code: "BROKER_TOOL_KEY_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid tool key format";
    };
    readonly BROKER_EVENT_SUBSCRIPTION_INVALID: {
        readonly code: "BROKER_EVENT_SUBSCRIPTION_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event subscription parameters";
    };
    readonly BROKER_EVENT_SUBSCRIPTION_FAILED: {
        readonly code: "BROKER_EVENT_SUBSCRIPTION_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to establish event subscription";
    };
    readonly BROKER_EVENT_PUBLISH_INVALID: {
        readonly code: "BROKER_EVENT_PUBLISH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event publish parameters";
    };
    readonly BROKER_EVENT_PUBLISH_FAILED: {
        readonly code: "BROKER_EVENT_PUBLISH_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to publish event";
    };
    readonly BROKER_EVENT_DELIVERY_FAILED: {
        readonly code: "BROKER_EVENT_DELIVERY_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to deliver event to subscriber";
    };
    readonly BROKER_EVENT_CHANNEL_INVALID: {
        readonly code: "BROKER_EVENT_CHANNEL_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event channel format";
    };
    readonly BROKER_EVENT_NETWORK_ACCESS_DENIED: {
        readonly code: "BROKER_EVENT_NETWORK_ACCESS_DENIED";
        readonly httpStatus: 403;
        readonly message: "Access denied to event network";
    };
    readonly BROKER_EVENT_QUEUE_ERROR: {
        readonly code: "BROKER_EVENT_QUEUE_ERROR";
        readonly httpStatus: 500;
        readonly message: "Event queue operation failed";
    };
    readonly BROKER_EVENT_MESSAGE_INVALID: {
        readonly code: "BROKER_EVENT_MESSAGE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event message structure";
    };
    readonly BROKER_INVALID_INPUT: {
        readonly code: "BROKER_INVALID_INPUT";
        readonly httpStatus: 400;
        readonly message: "Input validation failed against expected schema";
    };
    readonly BROKER_TOOL_NOT_IN_NETWORK: {
        readonly code: "BROKER_TOOL_NOT_IN_NETWORK";
        readonly httpStatus: 404;
        readonly message: "Tool not available in accessible networks";
    };
    readonly BROKER_TOOL_NAME_REQUIRED: {
        readonly code: "BROKER_TOOL_NAME_REQUIRED";
        readonly httpStatus: 400;
        readonly message: "Tool name is required for invocation";
    };
    readonly BROKER_TOOL_NO_PROVIDERS: {
        readonly code: "BROKER_TOOL_NO_PROVIDERS";
        readonly httpStatus: 503;
        readonly message: "No active providers available for tool";
    };
};
export declare const ErrorCodes: {
    readonly BROKER_TOOL_NOT_FOUND: {
        readonly code: "BROKER_TOOL_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested tool does not exist";
    };
    readonly BROKER_TOOL_NOT_ACCESSIBLE: {
        readonly code: "BROKER_TOOL_NOT_ACCESSIBLE";
        readonly httpStatus: 403;
        readonly message: "Tool not accessible within caller networks";
    };
    readonly BROKER_TOOL_INPUT_SCHEMA_VIOLATION: {
        readonly code: "BROKER_TOOL_INPUT_SCHEMA_VIOLATION";
        readonly httpStatus: 400;
        readonly message: "Tool input does not match schema";
    };
    readonly BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION: {
        readonly code: "BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION";
        readonly httpStatus: 500;
        readonly message: "Tool output does not match schema";
    };
    readonly BROKER_SESSION_NOT_INITIALIZED: {
        readonly code: "BROKER_SESSION_NOT_INITIALIZED";
        readonly httpStatus: 400;
        readonly message: "Session not initialized";
    };
    readonly BROKER_SESSION_ALREADY_INITIALIZED: {
        readonly code: "BROKER_SESSION_ALREADY_INITIALIZED";
        readonly httpStatus: 409;
        readonly message: "Session already initialized";
    };
    readonly BROKER_SESSION_INVALID_STATE: {
        readonly code: "BROKER_SESSION_INVALID_STATE";
        readonly httpStatus: 400;
        readonly message: "Invalid session state";
    };
    readonly BROKER_SESSION_HANDSHAKE_FAILED: {
        readonly code: "BROKER_SESSION_HANDSHAKE_FAILED";
        readonly httpStatus: 400;
        readonly message: "Handshake failed";
    };
    readonly BROKER_SESSION_NOT_FOUND: {
        readonly code: "BROKER_SESSION_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Session not found";
    };
    readonly BROKER_SESSION_TIMEOUT: {
        readonly code: "BROKER_SESSION_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Session timeout";
    };
    readonly BROKER_SESSION_ROLE_INVALID: {
        readonly code: "BROKER_SESSION_ROLE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid session role";
    };
    readonly BROKER_SESSION_KADI_HANDLER_FAILED: {
        readonly code: "BROKER_SESSION_KADI_HANDLER_FAILED";
        readonly httpStatus: 500;
        readonly message: "KADI handler failed";
    };
    readonly BROKER_SESSION_RATE_LIMITED: {
        readonly code: "BROKER_SESSION_RATE_LIMITED";
        readonly httpStatus: 429;
        readonly message: "Session rate limited";
    };
    readonly BROKER_SESSION_NOT_READY: {
        readonly code: "BROKER_SESSION_NOT_READY";
        readonly httpStatus: 400;
        readonly message: "Session not ready";
    };
    readonly BROKER_AUTH_MISSING_CREDENTIALS: {
        readonly code: "BROKER_AUTH_MISSING_CREDENTIALS";
        readonly httpStatus: 401;
        readonly message: "Missing credentials";
    };
    readonly BROKER_AUTH_SIGNATURE_INVALID: {
        readonly code: "BROKER_AUTH_SIGNATURE_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid signature";
    };
    readonly BROKER_AUTH_PUBLIC_KEY_INVALID: {
        readonly code: "BROKER_AUTH_PUBLIC_KEY_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid public key";
    };
    readonly BROKER_AUTH_NONCE_MISMATCH: {
        readonly code: "BROKER_AUTH_NONCE_MISMATCH";
        readonly httpStatus: 401;
        readonly message: "Nonce mismatch";
    };
    readonly BROKER_AUTH_AGENT_UNKNOWN: {
        readonly code: "BROKER_AUTH_AGENT_UNKNOWN";
        readonly httpStatus: 404;
        readonly message: "Unknown agent";
    };
    readonly BROKER_AUTH_SEQUENCE_ERROR: {
        readonly code: "BROKER_AUTH_SEQUENCE_ERROR";
        readonly httpStatus: 400;
        readonly message: "Auth sequence error";
    };
    readonly BROKER_AGENT_NOT_AUTHENTICATED: {
        readonly code: "BROKER_AGENT_NOT_AUTHENTICATED";
        readonly httpStatus: 401;
        readonly message: "Agent not authenticated";
    };
    readonly BROKER_AGENT_NETWORKS_MISSING: {
        readonly code: "BROKER_AGENT_NETWORKS_MISSING";
        readonly httpStatus: 400;
        readonly message: "Networks required";
    };
    readonly BROKER_AGENT_NETWORKS_EMPTY: {
        readonly code: "BROKER_AGENT_NETWORKS_EMPTY";
        readonly httpStatus: 400;
        readonly message: "No networks specified";
    };
    readonly BROKER_AGENT_ALREADY_REGISTERED: {
        readonly code: "BROKER_AGENT_ALREADY_REGISTERED";
        readonly httpStatus: 409;
        readonly message: "Agent already registered";
    };
    readonly BROKER_AGENT_NOT_FOUND: {
        readonly code: "BROKER_AGENT_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Agent not found";
    };
    readonly BROKER_AGENT_ID_NOT_SET: {
        readonly code: "BROKER_AGENT_ID_NOT_SET";
        readonly httpStatus: 400;
        readonly message: "Agent ID required";
    };
    readonly BROKER_AGENT_METADATA_NOT_FOUND: {
        readonly code: "BROKER_AGENT_METADATA_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Agent metadata not found";
    };
    readonly BROKER_NETWORK_NOT_FOUND: {
        readonly code: "BROKER_NETWORK_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Network not found";
    };
    readonly BROKER_NETWORK_ACCESS_DENIED: {
        readonly code: "BROKER_NETWORK_ACCESS_DENIED";
        readonly httpStatus: 403;
        readonly message: "Network access denied";
    };
    readonly BROKER_NETWORK_PUBLISH_DENIED: {
        readonly code: "BROKER_NETWORK_PUBLISH_DENIED";
        readonly httpStatus: 403;
        readonly message: "Publish denied for network";
    };
    readonly BROKER_QUEUE_CONNECTION_FAILED: {
        readonly code: "BROKER_QUEUE_CONNECTION_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to connect to message queue";
    };
    readonly BROKER_QUEUE_PUBLISH_FAILED: {
        readonly code: "BROKER_QUEUE_PUBLISH_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to publish message to queue";
    };
    readonly BROKER_QUEUE_SUBSCRIBE_FAILED: {
        readonly code: "BROKER_QUEUE_SUBSCRIBE_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to subscribe to queue";
    };
    readonly BROKER_QUEUE_NOT_FOUND: {
        readonly code: "BROKER_QUEUE_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Message queue does not exist";
    };
    readonly BROKER_SCHEMA_COMPILATION_ERROR: {
        readonly code: "BROKER_SCHEMA_COMPILATION_ERROR";
        readonly httpStatus: 400;
        readonly message: "Failed to compile JSON Schema";
    };
    readonly BROKER_PROTOCOL_VERSION_UNSUPPORTED: {
        readonly code: "BROKER_PROTOCOL_VERSION_UNSUPPORTED";
        readonly httpStatus: 400;
        readonly message: "Protocol version not supported";
    };
    readonly BROKER_PROTOCOL_METHOD_UNKNOWN: {
        readonly code: "BROKER_PROTOCOL_METHOD_UNKNOWN";
        readonly httpStatus: 400;
        readonly message: "Unknown protocol method";
    };
    readonly BROKER_PROTOCOL_INVALID_MESSAGE: {
        readonly code: "BROKER_PROTOCOL_INVALID_MESSAGE";
        readonly httpStatus: 400;
        readonly message: "Invalid message format";
    };
    readonly BROKER_PROTOCOL_MISSING_PARAMS: {
        readonly code: "BROKER_PROTOCOL_MISSING_PARAMS";
        readonly httpStatus: 400;
        readonly message: "Required parameters missing";
    };
    readonly BROKER_MCP_ALREADY_INITIALIZED: {
        readonly code: "BROKER_MCP_ALREADY_INITIALIZED";
        readonly httpStatus: 409;
        readonly message: "MCP bridge is already initialized";
    };
    readonly BROKER_MCP_NOT_INITIALIZED: {
        readonly code: "BROKER_MCP_NOT_INITIALIZED";
        readonly httpStatus: 400;
        readonly message: "MCP bridge must be initialized first";
    };
    readonly BROKER_MCP_METHOD_UNKNOWN: {
        readonly code: "BROKER_MCP_METHOD_UNKNOWN";
        readonly httpStatus: 400;
        readonly message: "Unknown MCP method";
    };
    readonly BROKER_MCP_CLIENT_NOT_READY: {
        readonly code: "BROKER_MCP_CLIENT_NOT_READY";
        readonly httpStatus: 400;
        readonly message: "MCP client not ready - must initialize first";
    };
    readonly BROKER_MCP_HANDLER_FAILED: {
        readonly code: "BROKER_MCP_HANDLER_FAILED";
        readonly httpStatus: 500;
        readonly message: "MCP message handler failed";
    };
    readonly BROKER_NAMESPACE_INVALID_FORMAT: {
        readonly code: "BROKER_NAMESPACE_INVALID_FORMAT";
        readonly httpStatus: 400;
        readonly message: "Invalid namespace format";
    };
    readonly BROKER_NAMESPACE_RESERVED: {
        readonly code: "BROKER_NAMESPACE_RESERVED";
        readonly httpStatus: 400;
        readonly message: "Namespace is reserved and cannot be used";
    };
    readonly BROKER_NAMESPACE_VERSION_INVALID: {
        readonly code: "BROKER_NAMESPACE_VERSION_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid namespace version format";
    };
    readonly BROKER_TOOL_KEY_INVALID: {
        readonly code: "BROKER_TOOL_KEY_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid tool key format";
    };
    readonly BROKER_EVENT_SUBSCRIPTION_INVALID: {
        readonly code: "BROKER_EVENT_SUBSCRIPTION_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event subscription parameters";
    };
    readonly BROKER_EVENT_SUBSCRIPTION_FAILED: {
        readonly code: "BROKER_EVENT_SUBSCRIPTION_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to establish event subscription";
    };
    readonly BROKER_EVENT_PUBLISH_INVALID: {
        readonly code: "BROKER_EVENT_PUBLISH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event publish parameters";
    };
    readonly BROKER_EVENT_PUBLISH_FAILED: {
        readonly code: "BROKER_EVENT_PUBLISH_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to publish event";
    };
    readonly BROKER_EVENT_DELIVERY_FAILED: {
        readonly code: "BROKER_EVENT_DELIVERY_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to deliver event to subscriber";
    };
    readonly BROKER_EVENT_CHANNEL_INVALID: {
        readonly code: "BROKER_EVENT_CHANNEL_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event channel format";
    };
    readonly BROKER_EVENT_NETWORK_ACCESS_DENIED: {
        readonly code: "BROKER_EVENT_NETWORK_ACCESS_DENIED";
        readonly httpStatus: 403;
        readonly message: "Access denied to event network";
    };
    readonly BROKER_EVENT_QUEUE_ERROR: {
        readonly code: "BROKER_EVENT_QUEUE_ERROR";
        readonly httpStatus: 500;
        readonly message: "Event queue operation failed";
    };
    readonly BROKER_EVENT_MESSAGE_INVALID: {
        readonly code: "BROKER_EVENT_MESSAGE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid event message structure";
    };
    readonly BROKER_INVALID_INPUT: {
        readonly code: "BROKER_INVALID_INPUT";
        readonly httpStatus: 400;
        readonly message: "Input validation failed against expected schema";
    };
    readonly BROKER_TOOL_NOT_IN_NETWORK: {
        readonly code: "BROKER_TOOL_NOT_IN_NETWORK";
        readonly httpStatus: 404;
        readonly message: "Tool not available in accessible networks";
    };
    readonly BROKER_TOOL_NAME_REQUIRED: {
        readonly code: "BROKER_TOOL_NAME_REQUIRED";
        readonly httpStatus: 400;
        readonly message: "Tool name is required for invocation";
    };
    readonly BROKER_TOOL_NO_PROVIDERS: {
        readonly code: "BROKER_TOOL_NO_PROVIDERS";
        readonly httpStatus: 503;
        readonly message: "No active providers available for tool";
    };
    readonly CORE_CONNECTION_FAILED: {
        readonly code: "CORE_CONNECTION_FAILED";
        readonly httpStatus: 503;
        readonly message: "Failed to establish connection";
    };
    readonly CORE_CONNECTION_TIMEOUT: {
        readonly code: "CORE_CONNECTION_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Connection attempt timed out";
    };
    readonly CORE_CONNECTION_REFUSED: {
        readonly code: "CORE_CONNECTION_REFUSED";
        readonly httpStatus: 503;
        readonly message: "Connection refused by remote server";
    };
    readonly CORE_BROKER_UNAVAILABLE: {
        readonly code: "CORE_BROKER_UNAVAILABLE";
        readonly httpStatus: 503;
        readonly message: "Broker service is unavailable";
    };
    readonly CORE_BROKER_CONNECTION_LOST: {
        readonly code: "CORE_BROKER_CONNECTION_LOST";
        readonly httpStatus: 503;
        readonly message: "Connection to broker was lost";
    };
    readonly CORE_AUTH_FAILED: {
        readonly code: "CORE_AUTH_FAILED";
        readonly httpStatus: 401;
        readonly message: "Authentication failed";
    };
    readonly CORE_AUTH_HANDSHAKE_FAILED: {
        readonly code: "CORE_AUTH_HANDSHAKE_FAILED";
        readonly httpStatus: 400;
        readonly message: "Authentication handshake failed";
    };
    readonly CORE_AUTH_TOKEN_INVALID: {
        readonly code: "CORE_AUTH_TOKEN_INVALID";
        readonly httpStatus: 401;
        readonly message: "Invalid authentication token";
    };
    readonly CORE_ABILITY_NOT_FOUND: {
        readonly code: "CORE_ABILITY_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested ability does not exist";
    };
    readonly CORE_ABILITY_LOAD_FAILED: {
        readonly code: "CORE_ABILITY_LOAD_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to load ability";
    };
    readonly CORE_ABILITY_NOT_ACCESSIBLE: {
        readonly code: "CORE_ABILITY_NOT_ACCESSIBLE";
        readonly httpStatus: 403;
        readonly message: "Ability not accessible in current context";
    };
    readonly CORE_ABILITY_START_FAILED: {
        readonly code: "CORE_ABILITY_START_FAILED";
        readonly httpStatus: 500;
        readonly message: "Failed to start ability process";
    };
    readonly CORE_ABILITY_TIMEOUT: {
        readonly code: "CORE_ABILITY_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Ability operation timed out";
    };
    readonly CORE_ABILITY_PATH_INVALID: {
        readonly code: "CORE_ABILITY_PATH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid ability path or name format";
    };
    readonly CORE_ABILITY_MANIFEST_INVALID: {
        readonly code: "CORE_ABILITY_MANIFEST_INVALID";
        readonly httpStatus: 400;
        readonly message: "Ability manifest file is invalid or missing";
    };
    readonly CORE_TOOL_NOT_FOUND: {
        readonly code: "CORE_TOOL_NOT_FOUND";
        readonly httpStatus: 404;
        readonly message: "Requested tool does not exist";
    };
    readonly CORE_TOOL_INVOCATION_FAILED: {
        readonly code: "CORE_TOOL_INVOCATION_FAILED";
        readonly httpStatus: 500;
        readonly message: "Tool invocation failed";
    };
    readonly CORE_TOOL_TIMEOUT: {
        readonly code: "CORE_TOOL_TIMEOUT";
        readonly httpStatus: 408;
        readonly message: "Tool execution timed out";
    };
    readonly CORE_TOOL_INPUT_INVALID: {
        readonly code: "CORE_TOOL_INPUT_INVALID";
        readonly httpStatus: 400;
        readonly message: "Tool input validation failed";
    };
    readonly CORE_PROTOCOL_UNSUPPORTED: {
        readonly code: "CORE_PROTOCOL_UNSUPPORTED";
        readonly httpStatus: 400;
        readonly message: "Protocol not supported";
    };
    readonly CORE_PROTOCOL_VERSION_MISMATCH: {
        readonly code: "CORE_PROTOCOL_VERSION_MISMATCH";
        readonly httpStatus: 400;
        readonly message: "Protocol version mismatch";
    };
    readonly CORE_MESSAGE_INVALID: {
        readonly code: "CORE_MESSAGE_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid message format";
    };
    readonly CORE_RPC_REQUEST_FAILED: {
        readonly code: "CORE_RPC_REQUEST_FAILED";
        readonly httpStatus: 500;
        readonly message: "RPC request failed";
    };
    readonly CORE_CONFIG_INVALID: {
        readonly code: "CORE_CONFIG_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid configuration";
    };
    readonly CORE_CONFIG_MISSING: {
        readonly code: "CORE_CONFIG_MISSING";
        readonly httpStatus: 400;
        readonly message: "Required configuration missing";
    };
    readonly CORE_CONFIG_PATH_INVALID: {
        readonly code: "CORE_CONFIG_PATH_INVALID";
        readonly httpStatus: 400;
        readonly message: "Invalid configuration file path";
    };
    readonly CORE_INTERNAL_ERROR: {
        readonly code: "CORE_INTERNAL_ERROR";
        readonly httpStatus: 500;
        readonly message: "An internal error occurred";
    };
    readonly CORE_NOT_IMPLEMENTED: {
        readonly code: "CORE_NOT_IMPLEMENTED";
        readonly httpStatus: 501;
        readonly message: "Feature not yet implemented";
    };
    readonly CORE_SYSTEM_OVERLOADED: {
        readonly code: "CORE_SYSTEM_OVERLOADED";
        readonly httpStatus: 503;
        readonly message: "System is currently overloaded";
    };
};
export type CoreErrorCode = keyof typeof CoreErrorCodes;
export type BrokerErrorCode = keyof typeof BrokerErrorCodes;
export type ErrorCode = keyof typeof ErrorCodes;
export interface ErrorContext {
    domain?: 'core' | 'broker';
    abilityName?: string;
    transport?: string;
    brokerUrl?: string;
    toolName?: string;
    method?: string;
    requestId?: string;
    networks?: string[];
    originalError?: Error;
    [key: string]: unknown;
}
/**
 * Custom error class for KADI Core operations
 */
export declare class KadiError extends Error {
    readonly code: ErrorCode;
    readonly httpStatus: number;
    readonly context: ErrorContext;
    readonly timestamp: number;
    readonly id: string;
    constructor(code: ErrorCode, message?: string, context?: ErrorContext);
    private generateErrorId;
    /**
     * Create a KadiError from another error
     */
    static fromError(error: Error, code: ErrorCode, context?: ErrorContext): KadiError;
    /**
     * Create a broker connection error
     */
    static brokerUnavailable(brokerUrl: string, originalError?: Error): KadiError;
    /**
     * Create an ability not found error
     */
    static abilityNotFound(abilityName: string, transport?: string): KadiError;
    /**
     * Create a tool not found error
     */
    static toolNotFound(toolName: string, abilityName?: string): KadiError;
    /**
     * Convert to client-friendly format
     */
    toClientError(): object;
    /**
     * Convert to JSON-RPC error format (broker-compatible)
     */
    toJsonRpcError(): {
        code: number;
        message: string;
        data?: unknown;
    };
    /**
     * Convert to detailed log format
     */
    toLogFormat(): string;
}
/**
 * Type guard to check if an error is a KadiError
 */
export declare function isKadiError(error: unknown): error is KadiError;
//# sourceMappingURL=error-codes.d.ts.map