/**
 * KADI Core Error Codes
 *
 * Inspired by the broker error system to ensure consistency
 *
 * Format: DOMAIN_SPECIFIC_ERROR
 * Ranges:
 *   1000-1999: Connection errors
 *   2000-2999: Authentication errors
 *   3000-3999: Ability/Loading errors
 *   4000-4999: Tool execution errors
 *   5000-5999: Protocol errors
 *   6000-6999: Configuration errors
 *   7000-7999: System/Internal errors
 */
export const CoreErrorCodes = {
    // =====================================================================
    // CONNECTION ERRORS (1000-1999)
    // =====================================================================
    CORE_CONNECTION_FAILED: {
        code: 'CORE_CONNECTION_FAILED',
        httpStatus: 503,
        message: 'Failed to establish connection'
    },
    CORE_CONNECTION_TIMEOUT: {
        code: 'CORE_CONNECTION_TIMEOUT',
        httpStatus: 408,
        message: 'Connection attempt timed out'
    },
    CORE_CONNECTION_REFUSED: {
        code: 'CORE_CONNECTION_REFUSED',
        httpStatus: 503,
        message: 'Connection refused by remote server'
    },
    CORE_BROKER_UNAVAILABLE: {
        code: 'CORE_BROKER_UNAVAILABLE',
        httpStatus: 503,
        message: 'Broker service is unavailable'
    },
    CORE_BROKER_CONNECTION_LOST: {
        code: 'CORE_BROKER_CONNECTION_LOST',
        httpStatus: 503,
        message: 'Connection to broker was lost'
    },
    // =======================================================================
    // AUTHENTICATION ERRORS (2000-2999)
    // =======================================================================
    CORE_AUTH_FAILED: {
        code: 'CORE_AUTH_FAILED',
        httpStatus: 401,
        message: 'Authentication failed'
    },
    CORE_AUTH_HANDSHAKE_FAILED: {
        code: 'CORE_AUTH_HANDSHAKE_FAILED',
        httpStatus: 400,
        message: 'Authentication handshake failed'
    },
    CORE_AUTH_TOKEN_INVALID: {
        code: 'CORE_AUTH_TOKEN_INVALID',
        httpStatus: 401,
        message: 'Invalid authentication token'
    },
    // ========================================================================
    // ABILITY/LOADING ERRORS (3000-3999)
    // ========================================================================
    CORE_ABILITY_NOT_FOUND: {
        code: 'CORE_ABILITY_NOT_FOUND',
        httpStatus: 404,
        message: 'Requested ability does not exist'
    },
    CORE_ABILITY_LOAD_FAILED: {
        code: 'CORE_ABILITY_LOAD_FAILED',
        httpStatus: 500,
        message: 'Failed to load ability'
    },
    CORE_ABILITY_NOT_ACCESSIBLE: {
        code: 'CORE_ABILITY_NOT_ACCESSIBLE',
        httpStatus: 403,
        message: 'Ability not accessible in current context'
    },
    CORE_ABILITY_START_FAILED: {
        code: 'CORE_ABILITY_START_FAILED',
        httpStatus: 500,
        message: 'Failed to start ability process'
    },
    CORE_ABILITY_TIMEOUT: {
        code: 'CORE_ABILITY_TIMEOUT',
        httpStatus: 408,
        message: 'Ability operation timed out'
    },
    CORE_ABILITY_PATH_INVALID: {
        code: 'CORE_ABILITY_PATH_INVALID',
        httpStatus: 400,
        message: 'Invalid ability path or name format'
    },
    CORE_ABILITY_MANIFEST_INVALID: {
        code: 'CORE_ABILITY_MANIFEST_INVALID',
        httpStatus: 400,
        message: 'Ability manifest file is invalid or missing'
    },
    // ========================================================================
    // TOOL EXECUTION ERRORS (4000-4999)
    // ========================================================================
    CORE_TOOL_NOT_FOUND: {
        code: 'CORE_TOOL_NOT_FOUND',
        httpStatus: 404,
        message: 'Requested tool does not exist'
    },
    CORE_TOOL_INVOCATION_FAILED: {
        code: 'CORE_TOOL_INVOCATION_FAILED',
        httpStatus: 500,
        message: 'Tool invocation failed'
    },
    CORE_TOOL_TIMEOUT: {
        code: 'CORE_TOOL_TIMEOUT',
        httpStatus: 408,
        message: 'Tool execution timed out'
    },
    CORE_TOOL_INPUT_INVALID: {
        code: 'CORE_TOOL_INPUT_INVALID',
        httpStatus: 400,
        message: 'Tool input validation failed'
    },
    // =======================================================================
    // PROTOCOL ERRORS (5000-5999)
    // =======================================================================
    CORE_PROTOCOL_UNSUPPORTED: {
        code: 'CORE_PROTOCOL_UNSUPPORTED',
        httpStatus: 400,
        message: 'Protocol not supported'
    },
    CORE_PROTOCOL_VERSION_MISMATCH: {
        code: 'CORE_PROTOCOL_VERSION_MISMATCH',
        httpStatus: 400,
        message: 'Protocol version mismatch'
    },
    CORE_MESSAGE_INVALID: {
        code: 'CORE_MESSAGE_INVALID',
        httpStatus: 400,
        message: 'Invalid message format'
    },
    CORE_RPC_REQUEST_FAILED: {
        code: 'CORE_RPC_REQUEST_FAILED',
        httpStatus: 500,
        message: 'RPC request failed'
    },
    // =======================================================================
    // CONFIGURATION ERRORS (6000-6999)
    // =======================================================================
    CORE_CONFIG_INVALID: {
        code: 'CORE_CONFIG_INVALID',
        httpStatus: 400,
        message: 'Invalid configuration'
    },
    CORE_CONFIG_MISSING: {
        code: 'CORE_CONFIG_MISSING',
        httpStatus: 400,
        message: 'Required configuration missing'
    },
    CORE_CONFIG_PATH_INVALID: {
        code: 'CORE_CONFIG_PATH_INVALID',
        httpStatus: 400,
        message: 'Invalid configuration file path'
    },
    // =======================================================================
    // SYSTEM ERRORS (7000-7999)
    // =======================================================================
    CORE_INTERNAL_ERROR: {
        code: 'CORE_INTERNAL_ERROR',
        httpStatus: 500,
        message: 'An internal error occurred'
    },
    CORE_NOT_IMPLEMENTED: {
        code: 'CORE_NOT_IMPLEMENTED',
        httpStatus: 501,
        message: 'Feature not yet implemented'
    },
    CORE_SYSTEM_OVERLOADED: {
        code: 'CORE_SYSTEM_OVERLOADED',
        httpStatus: 503,
        message: 'System is currently overloaded'
    }
};
// Broker error catalog (codes specific to the broker subsystem)
export const BrokerErrorCodes = {
    // TOOL/ABILITY (4000-4999)
    BROKER_TOOL_NOT_FOUND: {
        code: 'BROKER_TOOL_NOT_FOUND',
        httpStatus: 404,
        message: 'Requested tool does not exist'
    },
    BROKER_TOOL_NOT_ACCESSIBLE: {
        code: 'BROKER_TOOL_NOT_ACCESSIBLE',
        httpStatus: 403,
        message: 'Tool not accessible within caller networks'
    },
    BROKER_TOOL_INPUT_SCHEMA_VIOLATION: {
        code: 'BROKER_TOOL_INPUT_SCHEMA_VIOLATION',
        httpStatus: 400,
        message: 'Tool input does not match schema'
    },
    BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION: {
        code: 'BROKER_TOOL_OUTPUT_SCHEMA_VIOLATION',
        httpStatus: 500,
        message: 'Tool output does not match schema'
    },
    // SESSION (1000-1999)
    BROKER_SESSION_NOT_INITIALIZED: {
        code: 'BROKER_SESSION_NOT_INITIALIZED',
        httpStatus: 400,
        message: 'Session not initialized'
    },
    BROKER_SESSION_ALREADY_INITIALIZED: {
        code: 'BROKER_SESSION_ALREADY_INITIALIZED',
        httpStatus: 409,
        message: 'Session already initialized'
    },
    BROKER_SESSION_INVALID_STATE: {
        code: 'BROKER_SESSION_INVALID_STATE',
        httpStatus: 400,
        message: 'Invalid session state'
    },
    BROKER_SESSION_HANDSHAKE_FAILED: {
        code: 'BROKER_SESSION_HANDSHAKE_FAILED',
        httpStatus: 400,
        message: 'Handshake failed'
    },
    BROKER_SESSION_NOT_FOUND: {
        code: 'BROKER_SESSION_NOT_FOUND',
        httpStatus: 404,
        message: 'Session not found'
    },
    BROKER_SESSION_TIMEOUT: {
        code: 'BROKER_SESSION_TIMEOUT',
        httpStatus: 408,
        message: 'Session timeout'
    },
    BROKER_SESSION_ROLE_INVALID: {
        code: 'BROKER_SESSION_ROLE_INVALID',
        httpStatus: 400,
        message: 'Invalid session role'
    },
    BROKER_SESSION_KADI_HANDLER_FAILED: {
        code: 'BROKER_SESSION_KADI_HANDLER_FAILED',
        httpStatus: 500,
        message: 'KADI handler failed'
    },
    BROKER_SESSION_RATE_LIMITED: {
        code: 'BROKER_SESSION_RATE_LIMITED',
        httpStatus: 429,
        message: 'Session rate limited'
    },
    BROKER_SESSION_NOT_READY: {
        code: 'BROKER_SESSION_NOT_READY',
        httpStatus: 400,
        message: 'Session not ready'
    },
    // AUTH (2000-2999)
    BROKER_AUTH_MISSING_CREDENTIALS: {
        code: 'BROKER_AUTH_MISSING_CREDENTIALS',
        httpStatus: 401,
        message: 'Missing credentials'
    },
    BROKER_AUTH_SIGNATURE_INVALID: {
        code: 'BROKER_AUTH_SIGNATURE_INVALID',
        httpStatus: 401,
        message: 'Invalid signature'
    },
    BROKER_AUTH_PUBLIC_KEY_INVALID: {
        code: 'BROKER_AUTH_PUBLIC_KEY_INVALID',
        httpStatus: 401,
        message: 'Invalid public key'
    },
    BROKER_AUTH_NONCE_MISMATCH: {
        code: 'BROKER_AUTH_NONCE_MISMATCH',
        httpStatus: 401,
        message: 'Nonce mismatch'
    },
    BROKER_AUTH_AGENT_UNKNOWN: {
        code: 'BROKER_AUTH_AGENT_UNKNOWN',
        httpStatus: 404,
        message: 'Unknown agent'
    },
    BROKER_AUTH_SEQUENCE_ERROR: {
        code: 'BROKER_AUTH_SEQUENCE_ERROR',
        httpStatus: 400,
        message: 'Auth sequence error'
    },
    // AGENT (3000-3999)
    BROKER_AGENT_NOT_AUTHENTICATED: {
        code: 'BROKER_AGENT_NOT_AUTHENTICATED',
        httpStatus: 401,
        message: 'Agent not authenticated'
    },
    BROKER_AGENT_NETWORKS_MISSING: {
        code: 'BROKER_AGENT_NETWORKS_MISSING',
        httpStatus: 400,
        message: 'Networks required'
    },
    BROKER_AGENT_NETWORKS_EMPTY: {
        code: 'BROKER_AGENT_NETWORKS_EMPTY',
        httpStatus: 400,
        message: 'No networks specified'
    },
    BROKER_AGENT_ALREADY_REGISTERED: {
        code: 'BROKER_AGENT_ALREADY_REGISTERED',
        httpStatus: 409,
        message: 'Agent already registered'
    },
    BROKER_AGENT_NOT_FOUND: {
        code: 'BROKER_AGENT_NOT_FOUND',
        httpStatus: 404,
        message: 'Agent not found'
    },
    BROKER_AGENT_ID_NOT_SET: {
        code: 'BROKER_AGENT_ID_NOT_SET',
        httpStatus: 400,
        message: 'Agent ID required'
    },
    BROKER_AGENT_METADATA_NOT_FOUND: {
        code: 'BROKER_AGENT_METADATA_NOT_FOUND',
        httpStatus: 404,
        message: 'Agent metadata not found'
    },
    // NETWORK (3500-3599)
    BROKER_NETWORK_NOT_FOUND: {
        code: 'BROKER_NETWORK_NOT_FOUND',
        httpStatus: 404,
        message: 'Network not found'
    },
    BROKER_NETWORK_ACCESS_DENIED: {
        code: 'BROKER_NETWORK_ACCESS_DENIED',
        httpStatus: 403,
        message: 'Network access denied'
    },
    BROKER_NETWORK_PUBLISH_DENIED: {
        code: 'BROKER_NETWORK_PUBLISH_DENIED',
        httpStatus: 403,
        message: 'Publish denied for network'
    },
    // MESSAGE QUEUE (5000-5999)
    BROKER_QUEUE_CONNECTION_FAILED: {
        code: 'BROKER_QUEUE_CONNECTION_FAILED',
        httpStatus: 503,
        message: 'Failed to connect to message queue'
    },
    BROKER_QUEUE_PUBLISH_FAILED: {
        code: 'BROKER_QUEUE_PUBLISH_FAILED',
        httpStatus: 503,
        message: 'Failed to publish message to queue'
    },
    BROKER_QUEUE_SUBSCRIBE_FAILED: {
        code: 'BROKER_QUEUE_SUBSCRIBE_FAILED',
        httpStatus: 503,
        message: 'Failed to subscribe to queue'
    },
    BROKER_QUEUE_NOT_FOUND: {
        code: 'BROKER_QUEUE_NOT_FOUND',
        httpStatus: 404,
        message: 'Message queue does not exist'
    },
    // PROTOCOL/SCHEMA (6000-6999)
    BROKER_SCHEMA_COMPILATION_ERROR: {
        code: 'BROKER_SCHEMA_COMPILATION_ERROR',
        httpStatus: 400,
        message: 'Failed to compile JSON Schema'
    },
    BROKER_PROTOCOL_VERSION_UNSUPPORTED: {
        code: 'BROKER_PROTOCOL_VERSION_UNSUPPORTED',
        httpStatus: 400,
        message: 'Protocol version not supported'
    },
    BROKER_PROTOCOL_METHOD_UNKNOWN: {
        code: 'BROKER_PROTOCOL_METHOD_UNKNOWN',
        httpStatus: 400,
        message: 'Unknown protocol method'
    },
    BROKER_PROTOCOL_INVALID_MESSAGE: {
        code: 'BROKER_PROTOCOL_INVALID_MESSAGE',
        httpStatus: 400,
        message: 'Invalid message format'
    },
    BROKER_PROTOCOL_MISSING_PARAMS: {
        code: 'BROKER_PROTOCOL_MISSING_PARAMS',
        httpStatus: 400,
        message: 'Required parameters missing'
    },
    // MCP (6500-6599)
    BROKER_MCP_ALREADY_INITIALIZED: {
        code: 'BROKER_MCP_ALREADY_INITIALIZED',
        httpStatus: 409,
        message: 'MCP bridge is already initialized'
    },
    BROKER_MCP_NOT_INITIALIZED: {
        code: 'BROKER_MCP_NOT_INITIALIZED',
        httpStatus: 400,
        message: 'MCP bridge must be initialized first'
    },
    BROKER_MCP_METHOD_UNKNOWN: {
        code: 'BROKER_MCP_METHOD_UNKNOWN',
        httpStatus: 400,
        message: 'Unknown MCP method'
    },
    BROKER_MCP_CLIENT_NOT_READY: {
        code: 'BROKER_MCP_CLIENT_NOT_READY',
        httpStatus: 400,
        message: 'MCP client not ready - must initialize first'
    },
    BROKER_MCP_HANDLER_FAILED: {
        code: 'BROKER_MCP_HANDLER_FAILED',
        httpStatus: 500,
        message: 'MCP message handler failed'
    },
    // NAMESPACE (6800-6899)
    BROKER_NAMESPACE_INVALID_FORMAT: {
        code: 'BROKER_NAMESPACE_INVALID_FORMAT',
        httpStatus: 400,
        message: 'Invalid namespace format'
    },
    BROKER_NAMESPACE_RESERVED: {
        code: 'BROKER_NAMESPACE_RESERVED',
        httpStatus: 400,
        message: 'Namespace is reserved and cannot be used'
    },
    BROKER_NAMESPACE_VERSION_INVALID: {
        code: 'BROKER_NAMESPACE_VERSION_INVALID',
        httpStatus: 400,
        message: 'Invalid namespace version format'
    },
    BROKER_TOOL_KEY_INVALID: {
        code: 'BROKER_TOOL_KEY_INVALID',
        httpStatus: 400,
        message: 'Invalid tool key format'
    },
    // EVENTS (6900-6999)
    BROKER_EVENT_SUBSCRIPTION_INVALID: {
        code: 'BROKER_EVENT_SUBSCRIPTION_INVALID',
        httpStatus: 400,
        message: 'Invalid event subscription parameters'
    },
    BROKER_EVENT_SUBSCRIPTION_FAILED: {
        code: 'BROKER_EVENT_SUBSCRIPTION_FAILED',
        httpStatus: 500,
        message: 'Failed to establish event subscription'
    },
    BROKER_EVENT_PUBLISH_INVALID: {
        code: 'BROKER_EVENT_PUBLISH_INVALID',
        httpStatus: 400,
        message: 'Invalid event publish parameters'
    },
    BROKER_EVENT_PUBLISH_FAILED: {
        code: 'BROKER_EVENT_PUBLISH_FAILED',
        httpStatus: 500,
        message: 'Failed to publish event'
    },
    BROKER_EVENT_DELIVERY_FAILED: {
        code: 'BROKER_EVENT_DELIVERY_FAILED',
        httpStatus: 500,
        message: 'Failed to deliver event to subscriber'
    },
    BROKER_EVENT_CHANNEL_INVALID: {
        code: 'BROKER_EVENT_CHANNEL_INVALID',
        httpStatus: 400,
        message: 'Invalid event channel format'
    },
    BROKER_EVENT_NETWORK_ACCESS_DENIED: {
        code: 'BROKER_EVENT_NETWORK_ACCESS_DENIED',
        httpStatus: 403,
        message: 'Access denied to event network'
    },
    BROKER_EVENT_QUEUE_ERROR: {
        code: 'BROKER_EVENT_QUEUE_ERROR',
        httpStatus: 500,
        message: 'Event queue operation failed'
    },
    BROKER_EVENT_MESSAGE_INVALID: {
        code: 'BROKER_EVENT_MESSAGE_INVALID',
        httpStatus: 400,
        message: 'Invalid event message structure'
    },
    // VALIDATION/ROUTING helpers
    BROKER_INVALID_INPUT: {
        code: 'BROKER_INVALID_INPUT',
        httpStatus: 400,
        message: 'Input validation failed against expected schema'
    },
    BROKER_TOOL_NOT_IN_NETWORK: {
        code: 'BROKER_TOOL_NOT_IN_NETWORK',
        httpStatus: 404,
        message: 'Tool not available in accessible networks'
    },
    BROKER_TOOL_NAME_REQUIRED: {
        code: 'BROKER_TOOL_NAME_REQUIRED',
        httpStatus: 400,
        message: 'Tool name is required for invocation'
    },
    BROKER_TOOL_NO_PROVIDERS: {
        code: 'BROKER_TOOL_NO_PROVIDERS',
        httpStatus: 503,
        message: 'No active providers available for tool'
    }
};
export const ErrorCodes = { ...CoreErrorCodes, ...BrokerErrorCodes };
/**
 * Custom error class for KADI Core operations
 */
export class KadiError extends Error {
    code;
    httpStatus;
    context;
    timestamp;
    id;
    constructor(code, message, context = {}) {
        const errorDef = ErrorCodes[code];
        super(message || errorDef.message);
        this.name = 'KadiError';
        this.code = code;
        this.httpStatus = errorDef.httpStatus;
        const inferredDomain = code in CoreErrorCodes
            ? 'core'
            : code in BrokerErrorCodes
                ? 'broker'
                : undefined;
        this.context = context.domain
            ? context
            : { ...context, ...(inferredDomain ? { domain: inferredDomain } : {}) };
        this.timestamp = Date.now();
        this.id = this.generateErrorId();
        // Capture stack trace
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
    generateErrorId() {
        // Format: ERR_TIMESTAMP_RANDOM
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substring(2, 7);
        return `ERR_${timestamp}_${random}`.toUpperCase();
    }
    /**
     * Create a KadiError from another error
     */
    static fromError(error, code, context = {}) {
        const kadiError = new KadiError(code, error.message, {
            ...context,
            originalError: error
        });
        // Preserve original stack trace if available
        if (error.stack) {
            kadiError.stack = error.stack;
        }
        return kadiError;
    }
    /**
     * Create a broker connection error
     */
    static brokerUnavailable(brokerUrl, originalError) {
        return new KadiError(CoreErrorCodes.CORE_BROKER_UNAVAILABLE.code, `Failed to connect to broker at ${brokerUrl}`, {
            brokerUrl,
            originalError
        });
    }
    /**
     * Create an ability not found error
     */
    static abilityNotFound(abilityName, transport) {
        return new KadiError(CoreErrorCodes.CORE_ABILITY_NOT_FOUND.code, `Ability '${abilityName}' not found${transport ? ` for transport '${transport}'` : ''}`, {
            abilityName,
            transport
        });
    }
    /**
     * Create a tool not found error
     */
    static toolNotFound(toolName, abilityName) {
        return new KadiError(CoreErrorCodes.CORE_TOOL_NOT_FOUND.code, `Tool '${toolName}' not found${abilityName ? ` in ability '${abilityName}'` : ''}`, {
            toolName,
            abilityName
        });
    }
    /**
     * Convert to client-friendly format
     */
    toClientError() {
        return {
            error: {
                code: this.code,
                message: this.message,
                id: this.id,
                timestamp: this.timestamp,
                context: {
                    domain: this.context.domain,
                    abilityName: this.context.abilityName,
                    transport: this.context.transport,
                    toolName: this.context.toolName,
                    method: this.context.method,
                    requestId: this.context.requestId
                }
            }
        };
    }
    /**
     * Convert to JSON-RPC error format (broker-compatible)
     */
    toJsonRpcError() {
        return {
            code: -32000 - this.httpStatus,
            message: this.message,
            data: {
                errorCode: this.code,
                errorId: this.id,
                context: this.context,
                timestamp: this.timestamp
            }
        };
    }
    /**
     * Convert to detailed log format
     */
    toLogFormat() {
        return JSON.stringify({
            errorId: this.id,
            code: this.code,
            message: this.message,
            httpStatus: this.httpStatus,
            context: this.context,
            timestamp: this.timestamp,
            stack: this.stack
        }, null, 2);
    }
}
/**
 * Type guard to check if an error is a KadiError
 */
export function isKadiError(error) {
    return error instanceof KadiError;
}
//# sourceMappingURL=error-codes.js.map