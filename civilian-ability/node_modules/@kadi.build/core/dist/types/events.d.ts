/**
 * Event System Type Definitions
 * ------------------------------
 * Type definitions for the KADI Broker event system that enables
 * real-time, decoupled communication between agents and tools through
 * a publish-subscribe pattern built on top of RabbitMQ topic exchanges.
 *
 * Key Features:
 * - Network isolation: Events respect network boundaries
 * - Topic-based routing: Uses RabbitMQ topic exchanges with pattern matching
 * - Decoupled communication: Publishers don't need to know about subscribers
 * - Automatic cleanup: Resources are cleaned up when agents disconnect
 * - Type safety: Full TypeScript support with schema validation
 */
import type { NetworkId } from './protocol.js';
/**
 * Event channel pattern for subscriptions using hierarchical naming.
 *
 * Format: namespace.event-name or namespace.category.event-name
 * Examples:
 * - 'system.startup'
 * - 'tool.completed'
 * - 'agent.status.changed'
 *
 * Wildcards supported:
 * - '*' matches one segment (e.g., 'tool.*' matches 'tool.completed', 'tool.started')
 * - '#' matches multiple segments (e.g., 'system.#' matches 'system.startup', 'system.cpu.alert')
 */
export type EventChannel = string;
/**
 * Event subscription configuration that defines what events an agent wants to receive
 * and optional filtering criteria to reduce noise.
 */
export interface EventSubscription {
    /** Array of event channel patterns to subscribe to */
    channels: EventChannel[];
    /** Network to subscribe within - defaults to agent's networks if not specified */
    networkId?: NetworkId;
    /** Optional filters to reduce event volume */
    filter?: {
        /** Only receive events from specific publisher */
        publisherId?: string;
        /** Only receive events with matching metadata */
        metadata?: Record<string, unknown>;
    };
}
/**
 * Event message delivered to subscribers containing the event data
 * and metadata about its origin and routing.
 */
export interface EventMessage {
    /** The channel this event was published to (e.g., 'tool.execution.completed') */
    channel: EventChannel;
    /** Event-specific payload data - can be any serializable value */
    data: unknown;
    /** ISO 8601 timestamp when event was published */
    timestamp: string;
    /** ID of the agent/tool that published this event */
    publisherId: string;
    /** Network where this event was published */
    networkId: NetworkId;
    /** Optional metadata for correlation, versioning, and custom fields */
    metadata?: {
        /** For tracking related events across the system */
        correlationId?: string;
        /** Event schema version for evolution */
        version?: string;
        /** Event ID for deduplication and tracing */
        eventId?: string;
        /** Role of the publisher (agent, tool, system) */
        publisherRole?: string;
        /** Additional custom metadata */
        [key: string]: unknown;
    };
}
/**
 * Internal tracking structure for managing agent event subscriptions.
 * This is maintained by the broker to track which agents are subscribed
 * to which channels and to manage cleanup when agents disconnect.
 */
export interface EventSubscriptionMeta {
    /** ID of the agent that created this subscription */
    agentId: string;
    /** Set of channel patterns this agent is subscribed to */
    channels: Set<EventChannel>;
    /** Set of networks this agent has subscriptions in */
    networks: Set<NetworkId>;
    /** RabbitMQ queue name for this agent's event delivery */
    queueName: string;
    /** Optional filter configuration */
    filter?: EventSubscription['filter'];
    /** Timestamp when subscription was created (for cleanup and monitoring) */
    createdAt: number;
}
/**
 * Parameters for subscribing to events via the kadi.event.subscribe method
 */
export interface EventSubscribeParams {
    /** Array of event channel patterns to subscribe to */
    channels: EventChannel[];
    /** Optional network to subscribe within */
    networkId?: NetworkId;
    /** Optional filtering configuration */
    filter?: EventSubscription['filter'];
}
/**
 * Response from successful event subscription
 */
export interface EventSubscribeResult {
    /** Channels that were successfully subscribed to */
    subscribed: EventChannel[];
    /** Internal queue name for debugging/monitoring */
    queueName: string;
}
/**
 * Parameters for unsubscribing from events
 */
export interface EventUnsubscribeParams {
    /** Channel patterns to unsubscribe from */
    channels: EventChannel[];
    /** Network to unsubscribe from (defaults to 'global') */
    networkId?: NetworkId;
}
/**
 * Response from successful event unsubscription
 */
export interface EventUnsubscribeResult {
    /** Channels that were successfully unsubscribed */
    unsubscribed: EventChannel[];
}
/**
 * Parameters for publishing events via kadi.event.publish method
 */
export interface EventPublishParams {
    /** Event channel to publish to */
    channel: EventChannel;
    /** Event payload data */
    data: unknown;
    /** Networks to publish to (defaults to publisher's networks) */
    networks?: NetworkId[];
    /** Optional metadata to include with the event */
    metadata?: Record<string, unknown>;
}
/**
 * Response from successful event publication
 */
export interface EventPublishResult {
    /** Whether the event was successfully published */
    published: boolean;
    /** Unique identifier for this event (for tracking/debugging) */
    eventId: string;
}
/**
 * Parameters for listing current event subscriptions
 */
export interface EventListParams {
    /** Filter subscriptions by agent ID */
    agentId?: string;
    /** Filter subscriptions by network */
    networkId?: NetworkId;
}
/**
 * Response from event list operation showing current subscriptions
 */
export interface EventListResult {
    /** Array of active subscriptions */
    subscriptions: Array<{
        agentId: string;
        channels: EventChannel[];
        networks: NetworkId[];
        queueName: string;
        subscribedAt: string;
    }>;
}
/**
 * Event delivery notification sent to subscribers.
 * This is the structure of the notification message sent via WebSocket
 * when an event is delivered to a subscribed agent.
 */
export interface EventDeliveryNotification {
    /** Always 'kadi.event.delivery' for event notifications */
    method: 'kadi.event.delivery';
    /** The event message being delivered */
    params: EventMessage;
}
//# sourceMappingURL=events.d.ts.map