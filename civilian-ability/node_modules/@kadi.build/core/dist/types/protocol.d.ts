/**
 * Network identifier - agents can only communicate within same networks
 * Examples: 'global', 'humin-game-lab', 'test-network'
 */
export type NetworkId = string;
/**
 * Network configuration
 */
export interface Network {
    id: NetworkId;
    displayName?: string;
    description?: string;
    createdAt: number;
}
export type SessionRole = 'agent' | 'ability' | 'observer' | 'mcp_client';
export type SessionState = 'init' | 'hello' | 'authenticated' | 'ready' | 'mcp_initialized' | 'mcp_ready' | 'error' | 'closed';
export type QueueKind = 'agent' | 'ability';
export type MailboxMode = 'volatile' | 'persistent';
export interface JsonRpcRequest {
    jsonrpc: '2.0';
    method: string;
    params?: unknown;
    id?: string | number;
}
export interface JsonRpcResponse {
    jsonrpc: '2.0';
    result?: unknown;
    error?: JsonRpcError;
    id: string | number;
}
export interface JsonRpcError {
    code: number;
    message: string;
    data?: unknown;
}
export interface JsonRpcNotification {
    jsonrpc: '2.0';
    method: string;
    params?: unknown;
}
export interface PendingResponse {
    type: 'pending';
    requestId: string;
    message?: string;
}
export declare namespace KadiProtocol {
    interface HelloParams {
        role: SessionRole;
        version?: string;
    }
    interface HelloResult {
        supportedAuth: string[];
        requiredSteps: string[];
        heartbeatIntervalSec: number;
        mailboxModes?: MailboxMode[];
        nonce?: string;
    }
    interface AuthenticateParams {
        publicKey: string;
        signature: string;
        nonce: string;
        wantNewId?: boolean;
    }
    interface AuthenticateResult {
        agentId: string;
        mailbox: string;
        mailboxMode: MailboxMode;
    }
    interface Tool {
        name: string;
        title?: string;
        description?: string;
        version?: string;
        tags?: string[];
        inputSchema: object;
        outputSchema: object;
        networks?: NetworkId[];
    }
    interface RegisterCapabilitiesParams {
        tools?: Tool[];
        displayName?: string;
        mailboxMode?: MailboxMode;
        networks: NetworkId | NetworkId[];
        parentAgentId?: string;
    }
    interface RegisterCapabilitiesResult {
        agentId: string;
        registered: number;
        mailbox: string;
    }
    interface CallAbilityParams {
        toolName: string;
        toolInput: unknown;
        requestId?: string;
    }
    interface AbilityResultParams {
        requestId: string;
        toSessionId: string;
        result?: unknown;
        error?: unknown;
    }
}
export interface AgentMeta {
    agentId: string;
    publicKey: string;
    sessionId?: string;
    lastSeen: number;
    displayName?: string;
    tools?: KadiProtocol.Tool[];
    networks?: Set<NetworkId>;
    mailboxMode?: MailboxMode;
}
export interface BrokerEvent {
    type: string;
    timestamp: number;
    data: unknown;
}
export interface SystemSnapshot {
    agents: Array<{
        id: string;
        name: string;
        type: 'agent';
        tools: string[];
        networks: string[];
        status: 'active' | 'disconnected';
    }>;
    networks: Array<{
        id: string;
        name: string;
        type: 'network';
        status: 'active';
    }>;
    connections: Array<{
        from: string;
        to: string;
        status: 'connected' | 'disconnected';
    }>;
    timestamp: string;
}
export interface Provider {
    agentId: string;
    networks: NetworkId[];
    tags?: string[];
    lastSeen: number;
    displayName?: string;
}
export interface ToolProviderInfo {
    name: string;
    title?: string;
    description?: string;
    version?: string;
    inputSchema: object;
    outputSchema: object;
    providers: Array<{
        agentId: string;
        networks: string[];
        tags?: string[];
    }>;
}
//# sourceMappingURL=protocol.d.ts.map