/**
 * Core type definitions for KADI
 * These types are used throughout the library
 */
import { EventEmitter } from 'events';
import { WebSocket } from 'ws';
export interface KadiAbilityConfig {
    name: string;
    version: string;
    description?: string;
    transport?: TransportKind;
    network?: string;
    abilityAgentJSON?: string;
}
export interface KadiAgentConfig {
    name?: string;
    broker?: string | string[];
    brokers?: string[];
    networks?: string[];
    autoconnect?: boolean;
}
export type TransportKind = 'native' | 'stdio' | 'broker';
export interface TransportHandler {
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    send(message: KadiMessage): Promise<void>;
    onMessage(handler: MessageHandler): void;
}
export interface KadiMessage {
    type: MessageType;
    id: string;
    timestamp: number;
    payload?: unknown;
    error?: import('../errors/error-codes.js').KadiError;
    metadata?: MessageMetadata;
}
export interface MessageMetadata {
    source?: string;
    target?: string;
    correlationId?: string;
    timeout?: number;
}
export type MessageType = 'request' | 'response' | 'event' | 'error' | 'hello' | 'authenticate' | 'register' | 'heartbeat' | 'ability.call' | 'ability.result' | 'agent.message';
export type MessageHandler = (message: KadiMessage) => void | Promise<void>;
export { KadiError, ErrorCodes, isKadiError } from '../errors/error-codes.js';
export type { ErrorCode, ErrorContext } from '../errors/error-codes.js';
export interface MethodDefinition {
    name: string;
    handler: MethodHandler;
    schema?: MethodSchema;
}
export interface MethodSchema {
    description?: string;
    inputSchema?: JSONSchema;
    outputSchema?: JSONSchema;
}
export type MethodHandler = (params: unknown, context?: MethodContext) => Promise<unknown>;
export interface MethodContext {
    ability: string;
    version: string;
    transport: TransportKind;
    metadata?: Record<string, unknown>;
}
export interface Transport extends EventEmitter {
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    send(data: Buffer | string): Promise<void>;
    isConnected(): boolean;
}
export interface BrokerConnection {
    ws: WebSocket;
    url: string;
    brokerName?: string;
    agentId: string;
    isAuthenticated: boolean;
    heartbeatTimer?: NodeJS.Timeout;
}
export interface RpcRequest {
    jsonrpc: '2.0';
    method: string;
    params?: unknown;
    id: string | number;
}
export interface RpcResponse {
    jsonrpc: '2.0';
    result?: unknown;
    error?: RpcError;
    id: string | number;
}
export interface RpcError {
    code: number;
    message: string;
    data?: unknown;
}
export interface JSONSchema {
    type?: string;
    properties?: Record<string, JSONSchema>;
    required?: string[];
    items?: JSONSchema;
    enum?: unknown[];
    const?: unknown;
    minimum?: number;
    maximum?: number;
    minLength?: number;
    maxLength?: number;
    pattern?: string;
    format?: string;
    description?: string;
    default?: unknown;
    examples?: unknown[];
    $ref?: string;
}
export interface KadiEvent {
    name: string;
    data: unknown;
    timestamp: number;
    source: string;
}
export type EventHandler = (event: KadiEvent) => void | Promise<void>;
export interface AbilityMetadata {
    name: string;
    version: string;
    description?: string;
    author?: string;
    license?: string;
    repository?: string;
    keywords?: string[];
    methods: MethodInfo[];
}
export interface MethodInfo {
    name: string;
    description?: string;
    inputSchema?: JSONSchema;
    outputSchema?: JSONSchema;
}
export declare function isKadiMessage(obj: unknown): obj is KadiMessage;
export declare function isRpcRequest(obj: unknown): obj is RpcRequest;
export declare function isRpcResponse(obj: unknown): obj is RpcResponse;
//# sourceMappingURL=core.d.ts.map