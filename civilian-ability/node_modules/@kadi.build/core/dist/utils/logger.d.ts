import { Debugger } from 'debug';
export interface KadiLogger extends Debugger {
    trace: Debugger;
    error: Debugger;
    lifecycle: Debugger;
    protocol: Debugger;
    transport: Debugger;
    info: Debugger;
    warn: Debugger;
    debug: Debugger;
}
export declare const loggers: {
    main: KadiLogger | null;
    ability: KadiLogger | null;
    broker: KadiLogger | null;
    ipc: KadiLogger | null;
    transport: KadiLogger | null;
    rpc: KadiLogger | null;
};
/**
 * Creates a namespaced logger with sub-loggers for different concerns
 * @param namespace - The logger namespace (e.g., 'ability', 'broker')
 * @returns A logger instance with specialized sub-loggers
 */
export declare function createLogger(namespace: string): KadiLogger;
/**
 * Creates a logger for a specific component within a namespace
 */
export declare function createComponentLogger(component: string): KadiLogger;
/**
 * Checks if debug is enabled for a namespace
 */
export declare function isDebugEnabled(namespace: string): boolean;
/**
 * Format an object for logging
 */
export declare function formatObject(obj: any, label?: string): string;
/**
 * Create a child logger with additional context
 */
export declare function createChildLogger(parentLogger: KadiLogger, context: string): KadiLogger;
export declare function isKadiLogger(obj: unknown): obj is KadiLogger;
declare const _default: {
    loggers: {
        main: KadiLogger | null;
        ability: KadiLogger | null;
        broker: KadiLogger | null;
        ipc: KadiLogger | null;
        transport: KadiLogger | null;
        rpc: KadiLogger | null;
    };
    createLogger: typeof createLogger;
    createComponentLogger: typeof createComponentLogger;
    isDebugEnabled: typeof isDebugEnabled;
    formatObject: typeof formatObject;
    createChildLogger: typeof createChildLogger;
};
export default _default;
//# sourceMappingURL=logger.d.ts.map