export type ValidatedPath = string & {
    __brand: 'ValidatedPath';
};
/**
 * Resolves the Kadi executable directory path
 * @returns The directory containing the Kadi executable
 */
export declare function resolveKadiExecPath(): string;
/**
 * Safely resolves Kadi installation path
 * @throws {Error} If Kadi installation cannot be found
 */
export declare function resolveKadiInstallPath(): string;
export declare const kadiExecDir: string;
export declare const kadiRootDir: string;
export declare const kadiAgentPath: string;
export declare const rootDir: string;
export declare const abilitiesDir: string;
export declare const projectAgentPath: string;
export declare const kadiCoreAgentPath: string;
export declare const pathUtils: {
    /**
     * Normalizes path for current platform
     */
    readonly normalize: (inputPath: string) => string;
    /**
     * Checks if path is absolute
     */
    readonly isAbsolute: (inputPath: string) => boolean;
    /**
     * Safely joins paths
     */
    readonly join: (...paths: string[]) => string;
    /**
     * Gets directory name from path
     */
    readonly dirname: (inputPath: string) => string;
    /**
     * Gets base name from path
     */
    readonly basename: (inputPath: string, ext?: string) => string;
    /**
     * Resolve a path relative to the project root
     */
    readonly resolveFromRoot: (...segments: string[]) => string;
};
export default pathUtils;
//# sourceMappingURL=pathUtils.d.ts.map