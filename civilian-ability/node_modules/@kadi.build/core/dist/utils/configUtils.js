import { getKadiJSON } from './agentUtils.js';
// Initialize brokers configuration
const kadijson = getKadiJSON();
const brokers = {};
// Extract broker URLs from config - handle both object and array formats
const brokersConfig = kadijson?.brokers;
if (brokersConfig) {
    if (Array.isArray(brokersConfig)) {
        // Handle array format: [{name: 'local', url: 'ws://...'}]
        for (const broker of brokersConfig) {
            brokers[broker.name] = broker.url;
        }
    }
    else if (typeof brokersConfig === 'object') {
        // Handle object format: {local: 'ws://127.0.0.1:8080', remote: 'ws://...'}
        Object.assign(brokers, brokersConfig);
    }
}
export const KADI_BROKERS = brokers;
// Determine default broker
let defaultBrokerName;
if (kadijson?.brokers) {
    if (Array.isArray(kadijson.brokers)) {
        // Array format
        defaultBrokerName =
            kadijson.brokers.find((b) => b.default)?.name ||
                kadijson.brokers[0]?.name;
    }
    else {
        // Object format - use first key as default
        defaultBrokerName = Object.keys(kadijson.brokers)[0];
    }
}
export const KADI_BROKER_URL = defaultBrokerName
    ? brokers[defaultBrokerName]
    : undefined; // Backward compatibility
// Active broker state
let activeBrokerName = defaultBrokerName;
/**
 * Get broker URL by name
 */
export function getBrokerUrl(brokerName) {
    return brokers[brokerName];
}
/**
 * Get all broker names
 */
export function getBrokerNames() {
    return Object.keys(brokers);
}
/**
 * Get the default broker name
 */
export function getDefaultBrokerName() {
    return defaultBrokerName;
}
/**
 * Set the active broker
 * @throws {Error} If broker name is not found
 */
export function setActiveBroker(brokerName) {
    if (!brokers[brokerName]) {
        throw new Error(`Broker '${brokerName}' not found in configuration`);
    }
    activeBrokerName = brokerName;
}
/**
 * Get the active broker name
 */
export function getActiveBrokerName() {
    return activeBrokerName;
}
/**
 * Get the active broker URL
 */
export function getActiveBrokerUrl() {
    return activeBrokerName ? brokers[activeBrokerName] : undefined;
}
/**
 * Find ability version by name
 * @param abilities - Array of ability configurations
 * @param name - Name of the ability to find
 * @returns The ability configuration or undefined
 */
export function findAbilityVersionByName(abilities, name) {
    return abilities.find((ability) => ability.name === name);
}
// Export default for backward compatibility
export default {
    KADI_BROKERS,
    KADI_BROKER_URL,
    getBrokerUrl,
    getBrokerNames,
    getDefaultBrokerName,
    setActiveBroker,
    getActiveBrokerName,
    getActiveBrokerUrl,
    findAbilityVersionByName
};
//# sourceMappingURL=configUtils.js.map