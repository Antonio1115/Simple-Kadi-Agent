import path from 'node:path';
import fs from 'node:fs';
import { execSync } from 'node:child_process';
import { fileURLToPath } from 'node:url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
/**
 * Resolves the Kadi executable directory path
 * @returns The directory containing the Kadi executable
 */
export function resolveKadiExecPath() {
    // Try to find kadi using which command
    try {
        const kadiPath = execSync('which kadi', { encoding: 'utf8' }).trim();
        if (kadiPath) {
            return path.dirname(kadiPath);
        }
    }
    catch {
        // which command failed, continue with other methods
    }
    // Fallback to process.execPath
    return path.dirname(process.execPath);
}
/**
 * Safely resolves Kadi installation path
 * @throws {Error} If Kadi installation cannot be found
 */
export function resolveKadiInstallPath() {
    // Try using npm to find the global kadi installation
    try {
        const npmGlobalPath = execSync('npm root -g', { encoding: 'utf8' }).trim();
        const kadiPath = path.join(npmGlobalPath, 'kadi');
        if (fs.existsSync(kadiPath)) {
            return kadiPath;
        }
    }
    catch {
        // npm command failed, continue with other methods
    }
    // Try to find kadi in the path
    try {
        const kadiExecutable = execSync('which kadi', { encoding: 'utf8' }).trim();
        if (kadiExecutable) {
            // Follow symlinks to get real path
            const realPath = fs.realpathSync(kadiExecutable);
            // Go up from bin to find the kadi root
            let currentPath = path.dirname(realPath);
            while (currentPath !== path.dirname(currentPath)) {
                if (fs.existsSync(path.join(currentPath, 'package.json'))) {
                    try {
                        const pkg = JSON.parse(fs.readFileSync(path.join(currentPath, 'package.json'), 'utf8'));
                        if (pkg.name === 'kadi' || pkg.name === '@kadi.build/core') {
                            return currentPath;
                        }
                    }
                    catch {
                        // Not a valid package.json, continue searching
                    }
                }
                currentPath = path.dirname(currentPath);
            }
        }
    }
    catch {
        // which command failed
    }
    // Fallback to current working directory
    return process.cwd();
}
/**
 * Type guard to validate a path exists
 */
function validatePath(pathStr) {
    if (!fs.existsSync(pathStr)) {
        throw new Error(`Path does not exist: ${pathStr}`);
    }
    return pathStr;
}
// Export path constants
export const kadiExecDir = resolveKadiExecPath();
export const kadiRootDir = resolveKadiInstallPath();
export const kadiAgentPath = path.join(kadiRootDir, 'agent.json');
export const rootDir = process.cwd();
export const abilitiesDir = path.join(rootDir, 'abilities');
export const projectAgentPath = path.join(rootDir, 'agent.json');
export const kadiCoreAgentPath = path.join(__dirname, '..', 'agent.json');
// Platform-specific path utilities
export const pathUtils = {
    /**
     * Normalizes path for current platform
     */
    normalize(inputPath) {
        return path.normalize(inputPath);
    },
    /**
     * Checks if path is absolute
     */
    isAbsolute(inputPath) {
        return path.isAbsolute(inputPath);
    },
    /**
     * Safely joins paths
     */
    join(...paths) {
        return path.join(...paths);
    },
    /**
     * Gets directory name from path
     */
    dirname(inputPath) {
        return path.dirname(inputPath);
    },
    /**
     * Gets base name from path
     */
    basename(inputPath, ext) {
        return path.basename(inputPath, ext);
    },
    /**
     * Resolve a path relative to the project root
     */
    resolveFromRoot(...segments) {
        return path.resolve(rootDir, ...segments);
    }
};
export default pathUtils;
//# sourceMappingURL=pathUtils.js.map