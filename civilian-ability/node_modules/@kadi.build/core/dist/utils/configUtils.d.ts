export interface BrokerConfig {
    [key: string]: string;
}
export interface AbilityInfo {
    name: string;
    version: string;
    [key: string]: any;
}
export declare const KADI_BROKERS: BrokerConfig;
export declare const KADI_BROKER_URL: string | undefined;
/**
 * Get broker URL by name
 */
export declare function getBrokerUrl(brokerName: string): string | undefined;
/**
 * Get all broker names
 */
export declare function getBrokerNames(): string[];
/**
 * Get the default broker name
 */
export declare function getDefaultBrokerName(): string | undefined;
/**
 * Set the active broker
 * @throws {Error} If broker name is not found
 */
export declare function setActiveBroker(brokerName: string): void;
/**
 * Get the active broker name
 */
export declare function getActiveBrokerName(): string | undefined;
/**
 * Get the active broker URL
 */
export declare function getActiveBrokerUrl(): string | undefined;
/**
 * Find ability version by name
 * @param abilities - Array of ability configurations
 * @param name - Name of the ability to find
 * @returns The ability configuration or undefined
 */
export declare function findAbilityVersionByName(abilities: AbilityInfo[], name: string): AbilityInfo | undefined;
declare const _default: {
    KADI_BROKERS: BrokerConfig;
    KADI_BROKER_URL: string | undefined;
    getBrokerUrl: typeof getBrokerUrl;
    getBrokerNames: typeof getBrokerNames;
    getDefaultBrokerName: typeof getDefaultBrokerName;
    setActiveBroker: typeof setActiveBroker;
    getActiveBrokerName: typeof getActiveBrokerName;
    getActiveBrokerUrl: typeof getActiveBrokerUrl;
    findAbilityVersionByName: typeof findAbilityVersionByName;
};
export default _default;
//# sourceMappingURL=configUtils.d.ts.map