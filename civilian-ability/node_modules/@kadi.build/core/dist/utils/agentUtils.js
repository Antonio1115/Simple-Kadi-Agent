import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import { kadiAgentPath, kadiExecDir, kadiRootDir, abilitiesDir, projectAgentPath, kadiCoreAgentPath } from './pathUtils.js';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
/**
 * Get ability configuration JSON
 */
export function getAbilityJSON(abilityName, abilityVersion) {
    const abilityJSONPath = getAbilityJSONPath(abilityName, abilityVersion);
    if (!fs.existsSync(abilityJSONPath)) {
        return null;
    }
    try {
        const content = fs.readFileSync(abilityJSONPath, 'utf-8');
        return JSON.parse(content);
    }
    catch (error) {
        console.error(`Failed to read ability JSON at ${abilityJSONPath}:`, error);
        return null;
    }
}
/**
 * Get path to ability's agent.json file
 */
export function getAbilityJSONPath(abilityName, abilityVersion) {
    return path.join(abilitiesDir, abilityName, abilityVersion, 'agent.json');
}
/**
 * Get the abilities directory path
 */
export function getAbilitiesDir() {
    return abilitiesDir;
}
/**
 * Get agent configuration JSON (replaces getProjectJSON with proper typing)
 */
export function getAgentJSON() {
    const agentJSONPath = getProjectJSONPath(); // Still uses same path
    if (!fs.existsSync(agentJSONPath)) {
        return null;
    }
    try {
        const content = fs.readFileSync(agentJSONPath, 'utf-8');
        return JSON.parse(content);
    }
    catch (error) {
        console.error(`Failed to read agent JSON at ${agentJSONPath}:`, error);
        return null;
    }
}
/**
 * Get project configuration JSON (deprecated - use getAgentJSON instead)
 * @deprecated Use getAgentJSON for better typing
 */
export function getProjectJSON() {
    const projectJSONPath = getProjectJSONPath();
    if (!fs.existsSync(projectJSONPath)) {
        return null;
    }
    try {
        const content = fs.readFileSync(projectJSONPath, 'utf-8');
        return JSON.parse(content);
    }
    catch (error) {
        console.error(`Failed to read project JSON at ${projectJSONPath}:`, error);
        return null;
    }
}
/**
 * Get path to project's agent.json file
 */
export function getProjectJSONPath() {
    return projectAgentPath;
}
/**
 * Get Kadi core configuration JSON
 */
export function getKadiCoreJSON() {
    const kadiCoreJSONPath = getKadiCoreJSONPath();
    if (!fs.existsSync(kadiCoreJSONPath)) {
        return null;
    }
    try {
        const content = fs.readFileSync(kadiCoreJSONPath, 'utf-8');
        return JSON.parse(content);
    }
    catch (error) {
        console.error(`Failed to read Kadi core JSON at ${kadiCoreJSONPath}:`, error);
        return null;
    }
}
/**
 * Get path to Kadi core's agent.json file
 */
export function getKadiCoreJSONPath() {
    return kadiCoreAgentPath;
}
/**
 * Get main Kadi configuration JSON
 */
export function getKadiJSON() {
    const kadiJSONPath = getKadiJSONPath();
    if (!fs.existsSync(kadiJSONPath)) {
        return null;
    }
    try {
        const content = fs.readFileSync(kadiJSONPath, 'utf-8');
        return JSON.parse(content);
    }
    catch (error) {
        console.error(`Failed to read Kadi JSON at ${kadiJSONPath}:`, error);
        return null;
    }
}
/**
 * Get path to main Kadi agent.json file
 */
export function getKadiJSONPath() {
    return kadiAgentPath;
}
/**
 * Get Kadi executable path
 */
export function getKadiExecPath() {
    return kadiExecDir;
}
/**
 * Get Kadi installation path
 */
export function getKadiInstallPath() {
    return kadiRootDir;
}
/**
 * Get ability version from abilities array
 * @param abilities - Array of ability configurations
 * @param name - Name of the ability to find
 * @returns The ability version or 'latest' if not found
 */
export function getAbilityVersionFromArray(abilities, name) {
    const ability = abilities.find((a) => a.name === name);
    if (ability) {
        return ability.version;
    }
    // Check if ability exists in abilities directory with a default version
    const abilityDir = path.join(abilitiesDir, name);
    if (fs.existsSync(abilityDir)) {
        const versions = fs
            .readdirSync(abilityDir)
            .filter((dir) => fs.statSync(path.join(abilityDir, dir)).isDirectory());
        if (versions.length > 0) {
            // Return the latest version (simple string comparison)
            return versions.sort().reverse()[0];
        }
    }
    return 'latest';
}
// Initialize Kadi configuration and export API URLs
const kadijson = getKadiJSON() || {};
export const KADI_API_URL = kadijson.api;
export const SEARCH_API_URL = kadijson.api
    ? `${kadijson.api}/search`
    : undefined;
export const GET_API_URL = kadijson.api ? `${kadijson.api}/get` : undefined;
// Export default for backward compatibility
export default {
    getAbilityJSON,
    getAbilityJSONPath,
    getAbilitiesDir,
    getAgentJSON,
    getProjectJSON,
    getProjectJSONPath,
    getKadiCoreJSON,
    getKadiCoreJSONPath,
    getKadiJSON,
    getKadiJSONPath,
    getKadiExecPath,
    getKadiInstallPath,
    getAbilityVersionFromArray,
    KADI_API_URL,
    SEARCH_API_URL,
    GET_API_URL
};
//# sourceMappingURL=agentUtils.js.map