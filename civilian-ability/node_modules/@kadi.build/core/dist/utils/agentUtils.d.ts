export interface AbilityJSON {
    name: string;
    version: string;
    description?: string;
    main?: string;
    command?: string;
    [key: string]: any;
}
export interface ProjectJSON {
    name: string;
    version: string;
    abilities?: Array<{
        name: string;
        version: string;
    }>;
    [key: string]: any;
}
export interface AgentJSON {
    name: string;
    version: string;
    kind?: string;
    license?: string;
    description?: string;
    repo?: string;
    lib?: string;
    brokers?: {
        [brokerName: string]: string;
    };
    defaultBroker?: string;
    abilities?: {
        [abilityName: string]: string;
    };
    scripts?: {
        [scriptName: string]: string;
    };
    build?: {
        [buildName: string]: {
            image?: string;
            engine?: string;
            platform?: string;
            baseImage?: string;
            cli?: boolean;
            keepBuildDir?: boolean;
            buildManifest?: string;
            dryRun?: boolean;
            [key: string]: any;
        };
    };
    deploy?: {
        [deployName: string]: {
            target?: string;
            image?: string;
            engine?: string;
            network?: string;
            cert?: string;
            verbose?: boolean;
            showCommands?: boolean;
            ports?: Array<{
                port: number;
                as: number;
                to: string[];
            }>;
            services?: {
                [serviceName: string]: {
                    image?: string;
                    expose?: Array<{
                        port: number;
                        as: number;
                        to: Array<{
                            global?: boolean;
                            [key: string]: any;
                        }>;
                    }>;
                    resources?: {
                        cpu?: number;
                        memory?: string;
                        storage?: string;
                    };
                    pricing?: {
                        amount?: string;
                        denom?: string;
                    };
                    [key: string]: any;
                };
            };
            placement?: {
                attributes?: {
                    [key: string]: any;
                };
                [key: string]: any;
            };
            [key: string]: any;
        };
    };
    [key: string]: any;
}
export interface KadiJSON {
    brokers?: Array<{
        name: string;
        url: string;
        default?: boolean;
    }>;
    api?: string;
    [key: string]: any;
}
/**
 * Get ability configuration JSON
 */
export declare function getAbilityJSON(abilityName: string, abilityVersion: string): AbilityJSON | null;
/**
 * Get path to ability's agent.json file
 */
export declare function getAbilityJSONPath(abilityName: string, abilityVersion: string): string;
/**
 * Get the abilities directory path
 */
export declare function getAbilitiesDir(): string;
/**
 * Get agent configuration JSON (replaces getProjectJSON with proper typing)
 */
export declare function getAgentJSON(): AgentJSON | null;
/**
 * Get project configuration JSON (deprecated - use getAgentJSON instead)
 * @deprecated Use getAgentJSON for better typing
 */
export declare function getProjectJSON(): ProjectJSON | null;
/**
 * Get path to project's agent.json file
 */
export declare function getProjectJSONPath(): string;
/**
 * Get Kadi core configuration JSON
 */
export declare function getKadiCoreJSON(): KadiJSON | null;
/**
 * Get path to Kadi core's agent.json file
 */
export declare function getKadiCoreJSONPath(): string;
/**
 * Get main Kadi configuration JSON
 */
export declare function getKadiJSON(): KadiJSON | null;
/**
 * Get path to main Kadi agent.json file
 */
export declare function getKadiJSONPath(): string;
/**
 * Get Kadi executable path
 */
export declare function getKadiExecPath(): string;
/**
 * Get Kadi installation path
 */
export declare function getKadiInstallPath(): string;
/**
 * Get ability version from abilities array
 * @param abilities - Array of ability configurations
 * @param name - Name of the ability to find
 * @returns The ability version or 'latest' if not found
 */
export declare function getAbilityVersionFromArray(abilities: Array<{
    name: string;
    version: string;
}>, name: string): string;
export declare const KADI_API_URL: string | undefined;
export declare const SEARCH_API_URL: string | undefined;
export declare const GET_API_URL: string | undefined;
declare const _default: {
    getAbilityJSON: typeof getAbilityJSON;
    getAbilityJSONPath: typeof getAbilityJSONPath;
    getAbilitiesDir: typeof getAbilitiesDir;
    getAgentJSON: typeof getAgentJSON;
    getProjectJSON: typeof getProjectJSON;
    getProjectJSONPath: typeof getProjectJSONPath;
    getKadiCoreJSON: typeof getKadiCoreJSON;
    getKadiCoreJSONPath: typeof getKadiCoreJSONPath;
    getKadiJSON: typeof getKadiJSON;
    getKadiJSONPath: typeof getKadiJSONPath;
    getKadiExecPath: typeof getKadiExecPath;
    getKadiInstallPath: typeof getKadiInstallPath;
    getAbilityVersionFromArray: typeof getAbilityVersionFromArray;
    KADI_API_URL: string | undefined;
    SEARCH_API_URL: string | undefined;
    GET_API_URL: string | undefined;
};
export default _default;
//# sourceMappingURL=agentUtils.d.ts.map