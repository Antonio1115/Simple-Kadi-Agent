/**
 * Event System Schema Validation
 * ------------------------------
 * Zod schemas for validating event system parameters and messages.
 * This ensures type safety and proper input validation for all event operations.
 *
 * The schemas follow the established patterns in the KADI broker for consistency
 * and integrate with the existing validation middleware.
 */
import { z } from 'zod';
/**
 * Event channel pattern validation schema.
 *
 * Enforces the hierarchical naming convention:
 * - Format: namespace.event-name or namespace.category.event-name
 * - Examples: 'system.startup', 'tool.completed', 'agent.status.changed'
 * - Wildcards: '*' matches one segment, '#' matches multiple segments
 *
 * Rules:
 * - Must start with lowercase letter
 * - Segments separated by dots
 * - Only lowercase letters, numbers, underscores, hyphens allowed
 * - Wildcards * and # only allowed at end of segments
 */
export declare const EventChannelSchema: z.ZodString;
/**
 * Schema for event subscription requests (kadi.event.subscribe)
 */
export declare const EventSubscribeSchema: z.ZodObject<{
    channels: z.ZodArray<z.ZodString>;
    networkId: z.ZodOptional<z.ZodString>;
    filter: z.ZodOptional<z.ZodObject<{
        publisherId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type EventSubscribeParams = z.infer<typeof EventSubscribeSchema>;
/**
 * Schema for event subscription response
 */
export declare const EventSubscribeResultSchema: z.ZodObject<{
    subscribed: z.ZodArray<z.ZodString>;
    queueName: z.ZodString;
}, z.core.$strict>;
export type EventSubscribeResult = z.infer<typeof EventSubscribeResultSchema>;
/**
 * Schema for event unsubscription requests (kadi.event.unsubscribe)
 */
export declare const EventUnsubscribeSchema: z.ZodObject<{
    channels: z.ZodArray<z.ZodString>;
    networkId: z.ZodOptional<z.ZodString>;
}, z.core.$strict>;
export type EventUnsubscribeParams = z.infer<typeof EventUnsubscribeSchema>;
/**
 * Schema for event unsubscription response
 */
export declare const EventUnsubscribeResultSchema: z.ZodObject<{
    unsubscribed: z.ZodArray<z.ZodString>;
}, z.core.$strict>;
export type EventUnsubscribeResult = z.infer<typeof EventUnsubscribeResultSchema>;
/**
 * Schema for event publishing requests (kadi.event.publish)
 */
export declare const EventPublishSchema: z.ZodObject<{
    channel: z.ZodString;
    data: z.ZodUnknown;
    networks: z.ZodOptional<z.ZodArray<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, z.core.$strict>;
export type EventPublishParams = z.infer<typeof EventPublishSchema>;
/**
 * Schema for event publishing response
 */
export declare const EventPublishResultSchema: z.ZodObject<{
    published: z.ZodBoolean;
    eventId: z.ZodString;
}, z.core.$strict>;
export type EventPublishResult = z.infer<typeof EventPublishResultSchema>;
/**
 * Schema for event subscription listing requests (kadi.event.list)
 */
export declare const EventListSchema: z.ZodObject<{
    agentId: z.ZodOptional<z.ZodString>;
    networkId: z.ZodOptional<z.ZodString>;
}, z.core.$strict>;
export type EventListParams = z.infer<typeof EventListSchema>;
/**
 * Schema for event subscription listing response
 */
export declare const EventListResultSchema: z.ZodObject<{
    subscriptions: z.ZodArray<z.ZodObject<{
        agentId: z.ZodString;
        channels: z.ZodArray<z.ZodString>;
        networks: z.ZodArray<z.ZodString>;
        queueName: z.ZodString;
        subscribedAt: z.ZodString;
    }, z.core.$strip>>;
}, z.core.$strict>;
export type EventListResult = z.infer<typeof EventListResultSchema>;
/**
 * Schema for validating event messages before delivery.
 * This ensures all events have consistent structure when delivered to subscribers.
 */
export declare const EventMessageSchema: z.ZodObject<{
    channel: z.ZodString;
    data: z.ZodUnknown;
    timestamp: z.ZodString;
    publisherId: z.ZodString;
    networkId: z.ZodString;
    metadata: z.ZodOptional<z.ZodObject<{
        correlationId: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        eventId: z.ZodOptional<z.ZodString>;
        publisherRole: z.ZodOptional<z.ZodString>;
    }, z.core.$catchall<z.ZodUnknown>>>;
}, z.core.$strict>;
export type EventMessage = z.infer<typeof EventMessageSchema>;
/**
 * Validation middleware for event system methods.
 * Extends the existing ValidationMiddleware pattern to support event operations.
 */
export declare class EventValidationMiddleware {
    /**
     * Validates parameters for event system methods using appropriate schemas
     */
    static validateEventParams<T>(method: string, params: unknown): T;
    /**
     * Validates event message structure before delivery
     */
    static validateEventMessage(message: unknown): EventMessage;
    /**
     * Provides user-friendly error messages for common validation failures
     */
    static getValidationHint(method: string, error: z.ZodError): string;
}
/**
 * Export all schemas for use in tests and external validation
 */
export declare const EventSchemas: {
    readonly EventChannel: z.ZodString;
    readonly EventSubscribe: z.ZodObject<{
        channels: z.ZodArray<z.ZodString>;
        networkId: z.ZodOptional<z.ZodString>;
        filter: z.ZodOptional<z.ZodObject<{
            publisherId: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, z.core.$strip>>;
    }, z.core.$strict>;
    readonly EventUnsubscribe: z.ZodObject<{
        channels: z.ZodArray<z.ZodString>;
        networkId: z.ZodOptional<z.ZodString>;
    }, z.core.$strict>;
    readonly EventPublish: z.ZodObject<{
        channel: z.ZodString;
        data: z.ZodUnknown;
        networks: z.ZodOptional<z.ZodArray<z.ZodString>>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, z.core.$strict>;
    readonly EventList: z.ZodObject<{
        agentId: z.ZodOptional<z.ZodString>;
        networkId: z.ZodOptional<z.ZodString>;
    }, z.core.$strict>;
    readonly EventMessage: z.ZodObject<{
        channel: z.ZodString;
        data: z.ZodUnknown;
        timestamp: z.ZodString;
        publisherId: z.ZodString;
        networkId: z.ZodString;
        metadata: z.ZodOptional<z.ZodObject<{
            correlationId: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            eventId: z.ZodOptional<z.ZodString>;
            publisherRole: z.ZodOptional<z.ZodString>;
        }, z.core.$catchall<z.ZodUnknown>>>;
    }, z.core.$strict>;
};
//# sourceMappingURL=events.schemas.d.ts.map