import { z } from 'zod';
export declare const NetworkIdSchema: z.ZodString;
export declare const ToolNameSchema: z.ZodString;
export declare const ToolSchema: z.ZodObject<{
    name: z.ZodString;
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString>>;
    inputSchema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    networks: z.ZodOptional<z.ZodArray<z.ZodString>>;
}, z.core.$strip>;
export declare const MailboxModeSchema: z.ZodEnum<{
    volatile: "volatile";
    persistent: "persistent";
}>;
export declare const AgentIdSchema: z.ZodString;
export declare const KadiRegisterParamsSchema: z.ZodObject<{
    tools: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString>>;
        inputSchema: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        networks: z.ZodOptional<z.ZodArray<z.ZodString>>;
    }, z.core.$strip>>>>;
    displayName: z.ZodOptional<z.ZodString>;
    mailboxMode: z.ZodDefault<z.ZodOptional<z.ZodEnum<{
        volatile: "volatile";
        persistent: "persistent";
    }>>>;
    networks: z.ZodPipe<z.ZodUnion<readonly [z.ZodString, z.ZodArray<z.ZodString>]>, z.ZodTransform<string[], string | string[]>>;
    parentAgentId: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
export type KadiRegisterParams = z.infer<typeof KadiRegisterParamsSchema>;
export declare const KadiRegisterResultSchema: z.ZodObject<{
    agentId: z.ZodString;
    registered: z.ZodNumber;
    networks: z.ZodArray<z.ZodString>;
    mailbox: z.ZodString;
    mailboxMode: z.ZodEnum<{
        volatile: "volatile";
        persistent: "persistent";
    }>;
}, z.core.$strip>;
export type KadiRegisterResult = z.infer<typeof KadiRegisterResultSchema>;
export declare const KadiToolListParamsSchema: z.ZodObject<{
    networks: z.ZodOptional<z.ZodArray<z.ZodString>>;
}, z.core.$strip>;
export type KadiToolListParams = z.infer<typeof KadiToolListParamsSchema>;
export declare const KadiToolInvokeParamsSchema: z.ZodObject<{
    toolName: z.ZodString;
    toolInput: z.ZodOptional<z.ZodUnknown>;
    requestId: z.ZodOptional<z.ZodString>;
    timeout: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    metadata: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, z.core.$strip>;
export type KadiToolInvokeParams = z.infer<typeof KadiToolInvokeParamsSchema>;
export declare const KadiToolResultParamsSchema: z.ZodObject<{
    requestId: z.ZodString;
    result: z.ZodOptional<z.ZodUnknown>;
    error: z.ZodOptional<z.ZodUnknown>;
    metadata: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
}, z.core.$strip>;
export type KadiToolResultParams = z.infer<typeof KadiToolResultParamsSchema>;
export declare class ValidationMiddleware {
    static validateParams<T>(method: string, params: unknown): T;
}
//# sourceMappingURL=kadi.schemas.d.ts.map