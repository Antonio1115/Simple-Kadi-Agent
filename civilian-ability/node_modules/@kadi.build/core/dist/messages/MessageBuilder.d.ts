/**
 * TypeScript implementation of JSON-RPC message builders
 * Replaces the JavaScript message builder functionality
 */
/**
 * Simple ID factory for generating unique message IDs
 */
export declare class IdFactory {
    private counter;
    next(): string;
    uuid(): string;
}
/**
 * JSON-RPC message builder
 */
export declare class JsonRpcBuilder {
    private message;
    constructor(method: string, params?: any, isNotification?: boolean);
    /**
     * Set the request ID
     */
    id(id: string | number): this;
    /**
     * Add additional parameters
     */
    params(additionalParams: any): this;
    /**
     * Build the final message
     */
    build(): any;
    /**
     * Build and stringify
     */
    toString(): string;
}
/**
 * JSON-RPC response builder
 */
export declare class JsonRpcResponse {
    private response;
    constructor(id: string | number | null);
    /**
     * Set successful result
     */
    result(data: any): this;
    /**
     * Set error
     */
    error(code: number, message: string, data?: any): this;
    /**
     * Build the final response
     */
    build(): any;
    /**
     * Build and stringify
     */
    toString(): string;
}
/**
 * Common JSON-RPC error codes
 */
export declare const RpcErrorCodes: {
    readonly PARSE_ERROR: -32700;
    readonly INVALID_REQUEST: -32600;
    readonly METHOD_NOT_FOUND: -32601;
    readonly INVALID_PARAMS: -32602;
    readonly INTERNAL_ERROR: -32603;
    readonly SERVER_ERROR_START: -32099;
    readonly SERVER_ERROR_END: -32000;
};
/**
 * Helper function to create success response
 */
export declare function createSuccessResponse(id: string | number | null, result: any): any;
/**
 * Helper function to create error response
 */
export declare function createErrorResponse(id: string | number | null, code: number, message: string, data?: any): any;
/**
 * Helper function to create notification
 */
export declare function createNotification(method: string, params?: any): any;
//# sourceMappingURL=MessageBuilder.d.ts.map