/**
 * TypeScript implementation of Broker message builders
 * Replaces the JavaScript BrokerMessageBuilder functionality
 */
import { KadiRegisterCapabilitiesParams, KadiCallAbilityParams, KadiHelloParams, KadiAuthenticateParams, KadiAbilityResultParams } from '../types/broker.js';
import { JsonRpcBuilder } from './MessageBuilder.js';
/**
 * KADI Protocol message types (from kadi-broker)
 */
export declare const KadiMessages: {
    readonly SESSION_HELLO: "kadi.session.hello";
    readonly SESSION_AUTHENTICATE: "kadi.session.authenticate";
    readonly SESSION_PING: "kadi.session.ping";
    readonly SESSION_GOODBYE: "kadi.session.goodbye";
    readonly AGENT_REGISTER: "kadi.agent.register";
    readonly AGENT_UPDATE: "kadi.agent.update";
    readonly AGENT_UNREGISTER: "kadi.agent.unregister";
    readonly ABILITY_INVOKE: "kadi.ability.invoke";
    readonly ABILITY_RESULT: "kadi.ability.result";
    readonly ABILITY_QUEUED: "kadi.ability.queued";
    readonly ABILITY_CANCEL: "kadi.ability.cancel";
    readonly ABILITY_LIST: "kadi.ability.list";
    readonly EVENT_SUBSCRIBE: "kadi.event.subscribe";
    readonly EVENT_UNSUBSCRIBE: "kadi.event.unsubscribe";
    readonly EVENT_PUBLISH: "kadi.event.publish";
    readonly EVENT_DELIVERY: "kadi.event.delivery";
    readonly EVENT_LIST: "kadi.event.list";
    readonly OBSERVE_SUBSCRIBE: "kadi.observe.subscribe";
    readonly OBSERVE_SNAPSHOT: "kadi.observe.snapshot";
    readonly OBSERVE_EVENT: "kadi.observe.event";
    readonly ERROR: "kadi.error";
};
/**
 * Broker message builder for KADI protocol messages
 */
export declare class BrokerMessageBuilder {
    /**
     * Create hello message
     */
    static hello(params: KadiHelloParams): JsonRpcBuilder;
    /**
     * Create authenticate message
     */
    static authenticate(params: KadiAuthenticateParams): JsonRpcBuilder;
    /**
     * Create registerCapabilities message (maps to AGENT_REGISTER)
     */
    static registerCapabilities(params: KadiRegisterCapabilitiesParams): JsonRpcBuilder;
    /**
     * Create ping notification
     */
    static ping(): JsonRpcBuilder;
    /**
     * Create listTools message (maps to ABILITY_LIST)
     */
    static listTools(): JsonRpcBuilder;
    /**
     * Create callAbility message (maps to ABILITY_INVOKE)
     */
    static callAbility(params: KadiCallAbilityParams): JsonRpcBuilder;
    /**
     * Create abilityResult message
     */
    static abilityResult(params: KadiAbilityResultParams): JsonRpcBuilder;
    /**
     * Create agent register message (modern API)
     */
    static agentRegister(params: KadiRegisterCapabilitiesParams): JsonRpcBuilder;
    /**
     * Create ability invoke message (modern API)
     */
    static abilityInvoke(params: KadiCallAbilityParams): JsonRpcBuilder;
    /**
     * Create ability list message (modern API)
     */
    static abilityList(): JsonRpcBuilder;
    /**
     * Create session goodbye message
     */
    static goodbye(): JsonRpcBuilder;
}
export declare const Broker: typeof BrokerMessageBuilder;
export { IdFactory, JsonRpcBuilder } from './MessageBuilder.js';
//# sourceMappingURL=BrokerMessages.d.ts.map