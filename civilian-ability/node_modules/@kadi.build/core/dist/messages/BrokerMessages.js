/**
 * TypeScript implementation of Broker message builders
 * Replaces the JavaScript BrokerMessageBuilder functionality
 */
import { JsonRpcBuilder } from './MessageBuilder.js';
/**
 * KADI Protocol message types (from kadi-broker)
 */
export const KadiMessages = {
    // Session Management
    SESSION_HELLO: 'kadi.session.hello',
    SESSION_AUTHENTICATE: 'kadi.session.authenticate',
    SESSION_PING: 'kadi.session.ping',
    SESSION_GOODBYE: 'kadi.session.goodbye',
    // Agent Management
    AGENT_REGISTER: 'kadi.agent.register',
    AGENT_UPDATE: 'kadi.agent.update',
    AGENT_UNREGISTER: 'kadi.agent.unregister',
    // Ability Operations
    ABILITY_INVOKE: 'kadi.ability.invoke',
    ABILITY_RESULT: 'kadi.ability.result',
    ABILITY_QUEUED: 'kadi.ability.queued', // Notification that request is queued
    ABILITY_CANCEL: 'kadi.ability.cancel',
    ABILITY_LIST: 'kadi.ability.list',
    // Event System - Real-time publish-subscribe messaging
    EVENT_SUBSCRIBE: 'kadi.event.subscribe', // Subscribe to event channels
    EVENT_UNSUBSCRIBE: 'kadi.event.unsubscribe', // Unsubscribe from event channels
    EVENT_PUBLISH: 'kadi.event.publish', // Publish an event to channels
    EVENT_DELIVERY: 'kadi.event.delivery', // Notification of event delivery
    EVENT_LIST: 'kadi.event.list', // List current subscriptions
    // Observer Protocol
    OBSERVE_SUBSCRIBE: 'kadi.observe.subscribe',
    OBSERVE_SNAPSHOT: 'kadi.observe.snapshot',
    OBSERVE_EVENT: 'kadi.observe.event',
    // Errors
    ERROR: 'kadi.error'
};
/**
 * Legacy compatibility mapping for older method names
 */
const _LegacyMethodMap = {
    hello: KadiMessages.SESSION_HELLO,
    authenticate: KadiMessages.SESSION_AUTHENTICATE,
    registerCapabilities: KadiMessages.AGENT_REGISTER,
    ping: KadiMessages.SESSION_PING,
    listTools: KadiMessages.ABILITY_LIST,
    callAbility: KadiMessages.ABILITY_INVOKE,
    abilityResult: KadiMessages.ABILITY_RESULT
};
/**
 * Broker message builder for KADI protocol messages
 */
export class BrokerMessageBuilder {
    /**
     * Create hello message
     */
    static hello(params) {
        return new JsonRpcBuilder(KadiMessages.SESSION_HELLO, params);
    }
    /**
     * Create authenticate message
     */
    static authenticate(params) {
        return new JsonRpcBuilder(KadiMessages.SESSION_AUTHENTICATE, params);
    }
    /**
     * Create registerCapabilities message (maps to AGENT_REGISTER)
     */
    static registerCapabilities(params) {
        return new JsonRpcBuilder(KadiMessages.AGENT_REGISTER, params);
    }
    /**
     * Create ping notification
     */
    static ping() {
        return new JsonRpcBuilder(KadiMessages.SESSION_PING, undefined, true);
    }
    /**
     * Create listTools message (maps to ABILITY_LIST)
     */
    static listTools() {
        return new JsonRpcBuilder(KadiMessages.ABILITY_LIST);
    }
    /**
     * Create callAbility message (maps to ABILITY_INVOKE)
     */
    static callAbility(params) {
        return new JsonRpcBuilder(KadiMessages.ABILITY_INVOKE, params);
    }
    /**
     * Create abilityResult message
     */
    static abilityResult(params) {
        return new JsonRpcBuilder(KadiMessages.ABILITY_RESULT, params);
    }
    /**
     * Create agent register message (modern API)
     */
    static agentRegister(params) {
        return new JsonRpcBuilder(KadiMessages.AGENT_REGISTER, params);
    }
    /**
     * Create ability invoke message (modern API)
     */
    static abilityInvoke(params) {
        return new JsonRpcBuilder(KadiMessages.ABILITY_INVOKE, params);
    }
    /**
     * Create ability list message (modern API)
     */
    static abilityList() {
        return new JsonRpcBuilder(KadiMessages.ABILITY_LIST);
    }
    /**
     * Create session goodbye message
     */
    static goodbye() {
        return new JsonRpcBuilder(KadiMessages.SESSION_GOODBYE, undefined, true);
    }
}
// Export as default for compatibility with existing code
export const Broker = BrokerMessageBuilder;
// Export IdFactory for compatibility
export { IdFactory, JsonRpcBuilder } from './MessageBuilder.js';
//# sourceMappingURL=BrokerMessages.js.map