/**
 * TypeScript implementation of JSON-RPC message builders
 * Replaces the JavaScript message builder functionality
 */
import { randomUUID } from 'node:crypto';
/**
 * Simple ID factory for generating unique message IDs
 */
export class IdFactory {
    counter = 0;
    next() {
        return `${Date.now()}-${++this.counter}`;
    }
    uuid() {
        return randomUUID();
    }
}
/**
 * JSON-RPC message builder
 */
export class JsonRpcBuilder {
    message;
    constructor(method, params, isNotification = false) {
        this.message = {
            jsonrpc: '2.0',
            method
        };
        if (params !== undefined) {
            this.message.params = params;
        }
        if (!isNotification) {
            // Will be set later with id() method
            this.message.id = null;
        }
    }
    /**
     * Set the request ID
     */
    id(id) {
        this.message.id = id;
        return this;
    }
    /**
     * Add additional parameters
     */
    params(additionalParams) {
        if (this.message.params) {
            this.message.params = { ...this.message.params, ...additionalParams };
        }
        else {
            this.message.params = additionalParams;
        }
        return this;
    }
    /**
     * Build the final message
     */
    build() {
        return { ...this.message };
    }
    /**
     * Build and stringify
     */
    toString() {
        return JSON.stringify(this.build());
    }
}
/**
 * JSON-RPC response builder
 */
export class JsonRpcResponse {
    response;
    constructor(id) {
        this.response = {
            jsonrpc: '2.0',
            id
        };
    }
    /**
     * Set successful result
     */
    result(data) {
        this.response.result = data;
        delete this.response.error;
        return this;
    }
    /**
     * Set error
     */
    error(code, message, data) {
        this.response.error = {
            code,
            message
        };
        if (data !== undefined) {
            this.response.error.data = data;
        }
        delete this.response.result;
        return this;
    }
    /**
     * Build the final response
     */
    build() {
        return { ...this.response };
    }
    /**
     * Build and stringify
     */
    toString() {
        return JSON.stringify(this.build());
    }
}
/**
 * Common JSON-RPC error codes
 */
export const RpcErrorCodes = {
    PARSE_ERROR: -32700,
    INVALID_REQUEST: -32600,
    METHOD_NOT_FOUND: -32601,
    INVALID_PARAMS: -32602,
    INTERNAL_ERROR: -32603,
    SERVER_ERROR_START: -32099,
    SERVER_ERROR_END: -32000
};
/**
 * Helper function to create success response
 */
export function createSuccessResponse(id, result) {
    return new JsonRpcResponse(id).result(result).build();
}
/**
 * Helper function to create error response
 */
export function createErrorResponse(id, code, message, data) {
    return new JsonRpcResponse(id).error(code, message, data).build();
}
/**
 * Helper function to create notification
 */
export function createNotification(method, params) {
    return new JsonRpcBuilder(method, params, true).build();
}
//# sourceMappingURL=MessageBuilder.js.map