/**
 * Transport Interface
 *
 * Defines the contract that all protocol transports must implement.
 * A transport is responsible for establishing connections and invoking
 * methods across different communication protocols (native, stdio, broker, etc.)
 *
 * The Transport abstraction allows loadAbility() to work uniformly across
 * all protocols, providing a consistent interface regardless of whether
 * the ability is loaded locally, from a child process, or from a remote broker.
 */
import { EventEmitter } from 'events';
/**
 * Transport interface that all protocol implementations must follow
 */
export interface Transport extends EventEmitter {
    /**
     * Establish connection to the ability/service
     *
     * For native: loads the module from disk
     * For stdio: spawns the child process
     * For broker: connects to WebSocket and authenticates
     */
    connect(): Promise<void>;
    /**
     * Invoke a method on the connected ability
     *
     * @param method - The method name to invoke
     * @param params - The parameters to pass to the method
     * @returns The result from the method invocation
     * @throws Error if not connected or method fails
     */
    invoke(method: string, params: unknown): Promise<unknown>;
    /**
     * Get the list of available methods
     *
     * For native: methods discovered from the loaded module
     * For stdio: methods discovered via __kadi_discover
     * For broker: methods discovered from the remote agent
     *
     * @returns Array of method names
     */
    getMethods(): string[];
    /**
     * Disconnect and cleanup resources
     *
     * For native: cleanup module references
     * For stdio: terminate child process
     * For broker: close WebSocket connection
     */
    disconnect(): Promise<void>;
    /**
     * Optional: Get schema for a specific method
     * Not all transports may support this
     *
     * @param method - The method name
     * @returns The method schema if available
     */
    getMethodSchema?(method: string): {
        inputSchema?: unknown;
        outputSchema?: unknown;
    } | undefined;
    /**
     * Optional: Publish an event from the ability
     * Used when an ability needs to emit events to its parent/caller
     *
     * @param eventName - Name of the event
     * @param data - Event data payload
     */
    publishEvent?(eventName: string, data: unknown): void;
}
/**
 * Base options for transport configuration
 */
export interface TransportOptions {
    /**
     * Name of the ability/agent being connected to
     */
    abilityName: string;
    /**
     * Version of the ability (optional)
     */
    abilityVersion?: string;
    /**
     * Timeout for method invocations in milliseconds
     */
    timeoutMs?: number;
    /**
     * Additional protocol-specific options
     */
    [key: string]: unknown;
}
//# sourceMappingURL=Transport.d.ts.map