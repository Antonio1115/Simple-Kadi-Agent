/**
 * NativeTransport - Handles direct in-process ability loading
 *
 * This transport loads abilities directly into the same process,
 * allowing for zero-overhead method invocation. It's used when
 * you want to load local JavaScript/TypeScript modules as abilities.
 *
 * The native protocol is the fastest but requires the ability code
 * to be trusted since it runs in the same process.
 */
import { EventEmitter } from 'events';
import { Transport, TransportOptions } from './Transport.js';
/**
 * Options specific to NativeTransport
 */
interface NativeTransportOptions extends TransportOptions {
    /**
     * Directory where the ability code is located
     */
    abilityDir: string;
}
/**
 * NativeTransport - Loads and executes abilities in the same process
 *
 * This transport provides the fastest execution since there's no
 * serialization or IPC overhead. The ability code runs directly
 * in the Node.js process.
 */
export declare class NativeTransport extends EventEmitter implements Transport {
    private options;
    private logger;
    private ability;
    private methodHandlers;
    private connected;
    constructor(options: NativeTransportOptions);
    /**
     * Connect by loading the ability module into memory
     *
     * This method uses JavaScript's native import to load the ability,
     * delegating all module resolution complexity to Node.js itself.
     */
    connect(): Promise<void>;
    /**
     * Extract methods from the loaded module
     *
     * Handles different export formats:
     * - KadiClient/KadiAbility instances
     * - Plain objects with function properties
     * - Class constructors
     */
    private extractMethods;
    /**
     * Invoke a method on the loaded ability
     *
     * Since this is native, we just call the function directly
     * with no serialization overhead.
     */
    invoke(method: string, params: unknown): Promise<unknown>;
    /**
     * Get list of available methods
     */
    getMethods(): string[];
    /**
     * Get schema for a specific method (if available)
     */
    getMethodSchema(method: string): {
        inputSchema?: unknown;
        outputSchema?: unknown;
    } | undefined;
    /**
     * Disconnect and cleanup
     *
     * Releases references to the loaded module to allow garbage collection
     */
    disconnect(): Promise<void>;
    /**
     * Check if transport is connected
     */
    isConnected(): boolean;
}
export {};
//# sourceMappingURL=NativeTransport.d.ts.map