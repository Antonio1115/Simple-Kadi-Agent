/**
 * StdioTransport - Handles stdio communication for abilities
 *
 * This transport operates in two modes:
 *
 * CLIENT MODE: Spawns an ability as a child process and calls its methods
 * - Parent process sends JSON-RPC requests to child's stdin
 * - Child process sends JSON-RPC responses back via stdout
 *
 * SERVER MODE: Serves an ability's methods via stdio (when running as a child)
 * - Reads JSON-RPC requests from stdin
 * - Writes JSON-RPC responses to stdout
 *
 * Both modes use LSP-style message framing for reliable communication.
 * The transport handles all the complexity of:
 * - Process spawning and lifecycle management (client mode)
 * - Message framing and buffering
 * - Request/response correlation
 * - Timeout handling
 */
import { EventEmitter } from 'events';
import { Transport, TransportOptions } from './Transport.js';
/**
 * Options specific to StdioTransport
 */
interface StdioTransportOptions extends TransportOptions {
    /**
     * Directory where the ability code is located
     */
    abilityDir: string;
    /**
     * Command to start the ability process
     */
    startCmd: string;
    /**
     * Optional timeout override (milliseconds)
     */
    timeoutMs?: number;
}
/**
 * StdioTransport - Manages child process abilities via stdio
 *
 * This transport provides process isolation and language independence.
 * The ability runs in a separate process and can be written in any
 * language that supports JSON-RPC over stdio.
 */
export declare class StdioTransport extends EventEmitter implements Transport {
    private options;
    private logger;
    private process?;
    private reader?;
    private writer?;
    private connected;
    private pending;
    private nextId;
    constructor(options: StdioTransportOptions);
    /**
     * Connect by spawning the child process
     *
     * This method spawns the ability as a child process and sets up
     * the stdio communication channels.
     */
    connect(): Promise<void>;
    /**
     * Handle incoming message from child process
     */
    private handleMessage;
    /**
     * Invoke a method on the child process ability
     *
     * Sends a JSON-RPC request to the child and waits for the response.
     */
    invoke(method: string, params: unknown): Promise<unknown>;
    /**
     * Get list of available methods
     */
    getMethods(): string[];
    /**
     * Disconnect and cleanup
     *
     * Terminates the child process and cleans up resources.
     */
    disconnect(): Promise<void>;
    /**
     * Cleanup resources
     */
    private cleanup;
    /**
     * Check if transport is connected
     */
    isConnected(): boolean;
    /**
     * Publish an event to the parent process (when serving as child)
     */
    publishEvent(eventName: string, data: unknown): void;
    /**
     * Serve an ability via stdio (server mode)
     *
     * This method is used when the transport needs to serve an ability's methods
     * via stdio (when running as a child process). It reads JSON-RPC requests
     * from stdin and writes responses to stdout.
     *
     * @param ability - The ability (KadiClient) to serve
     */
    serve(ability: {
        name: string;
        getToolNames: () => string[];
        getToolHandler: (method: string) => ((p: unknown) => Promise<unknown>) | undefined;
    }): Promise<void>;
}
export {};
//# sourceMappingURL=StdioTransport.d.ts.map